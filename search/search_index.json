{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DSP-UI \u2014 A library to easily create DSP Apps DSP-UI is a library of angular modules enabling users to interact with DSP-API to create a web application in a quick and simple way. These modules, comprised of components and directives, are written in Typescript and rely on Angular material . DSP-UI is developed by the Data and Service Center for the Humanities as free software , released under GNU Affero General Public license. Documentation \u27a1 Getting started Library modules The library consists of four Angular modules that are briefly described below. \u27a1 DspCoreModule Services for API requests DspCoreModule is a configuration handler for @dasch-swiss/dsp-js which offers all the services to make DSP-API requests . \u27a1 DspViewerModule Resources, Properties, Lists, Value components DspViewerModule contains object components to show a resource class representation, the property gui-elements and various view frameworks. \u27a1 DspSearchModule Search panel for all kind of search queries DspSearchModule allows to make full text or advanced searches in DSP-API. Filter by resource class and its properties related to an ontology. \u27a1 DspActionModule Special pipes and buttons DspActionModule contains special pipes to sort lists or to get the index key in arrays, but also directives and components for images, sort buttons and s.o. Contribution If you would like to contribute to the development of the DSP-UI modules alongside us, please consult the general DSP contribution guidelines or the DSP-UI specific contribution guidelines and the design documentation .","title":"Introduction"},{"location":"#dsp-ui-a-library-to-easily-create-dsp-apps","text":"DSP-UI is a library of angular modules enabling users to interact with DSP-API to create a web application in a quick and simple way. These modules, comprised of components and directives, are written in Typescript and rely on Angular material . DSP-UI is developed by the Data and Service Center for the Humanities as free software , released under GNU Affero General Public license.","title":"DSP-UI &mdash; A library to easily create DSP Apps"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#getting-started","text":"","title":"\u27a1 Getting started"},{"location":"#library-modules","text":"The library consists of four Angular modules that are briefly described below.","title":"Library modules"},{"location":"#dspcoremodule","text":"Services for API requests DspCoreModule is a configuration handler for @dasch-swiss/dsp-js which offers all the services to make DSP-API requests .","title":"\u27a1 DspCoreModule"},{"location":"#dspviewermodule","text":"Resources, Properties, Lists, Value components DspViewerModule contains object components to show a resource class representation, the property gui-elements and various view frameworks.","title":"\u27a1 DspViewerModule"},{"location":"#dspsearchmodule","text":"Search panel for all kind of search queries DspSearchModule allows to make full text or advanced searches in DSP-API. Filter by resource class and its properties related to an ontology.","title":"\u27a1 DspSearchModule"},{"location":"#dspactionmodule","text":"Special pipes and buttons DspActionModule contains special pipes to sort lists or to get the index key in arrays, but also directives and components for images, sort buttons and s.o.","title":"\u27a1 DspActionModule"},{"location":"#contribution","text":"If you would like to contribute to the development of the DSP-UI modules alongside us, please consult the general DSP contribution guidelines or the DSP-UI specific contribution guidelines and the design documentation .","title":"Contribution"},{"location":"how-to-contribute/","text":"How to Contribute to this Project If you are interested in contributing to this project, please read our general DSP contribution guidelines first. Structure of this Project This project consists of two main parts: The Angular library DSP-UI (@dasch-swiss/dsp-ui) in project/dsp-ui . The demo Angular Application (Playground) in src/app . The Angular library contains the code that is published on NPM. The demo Angular application's purpose is to demonstrate the library's functionality. The library needs to be built first in order to use it within the demo application. The demo application uses the locally built version of @dasch-swiss/dsp-ui which is configured in tsconfig.json ( compilerOptions.paths ), see Angular docs . Prerequisites Node.js Angular requires a current, active LTS, or maintenance LTS version of Node.js. We recommend using n , a tool that installs and manages Node.js versions on your local system. NPM package manager Angular requires the npm package manager . DSP-API The demo application requires a running instance of DSP-API (Knora) compatible with the version defined in vars.mk : API_VERSION := v13.12.0 First Steps Clone this repository: git clone https://github.com/dasch-swiss/dsp-ui-lib/ Install the dependencies with: npm install Build the library with: npm run build-lib Run the demo application: ng s And access http://localhost:4200 in your browser. Scripts For Development The following scripts can be used for development: Testing npm test : runs the unit tests of the demo application and the lib's unit tests. npm test-lib : runs the lib's unit tests in headless mode (no browser UI). npm test-lib-local : runs the lib's unit test with the browser UI (for local development of the lib). npm run webdriver-update : installs Chrome webdriver in the required version for the E2E tests. npm run e2e : runs the E2E tests from the demo application, see section Unit Tests and E2E Tests . Building npm run build-lib : builds the lib in productive mode npm run build-lib-dev : builds the lib in development mode npm build-app : builds the demo application in productive mode npm run yalc-publish-lib : builds the lib and publishes it locally using yalc . Library Build Options The library is built in productive mode for publication, using tsconfig.lib.prod.json . To perform additional checks during development, the library can be built in development mode, using tsconfig.lib.json . Development builds use Ivy and perform strict template checks . Unit Tests and E2E Tests There are unit tests for the lib ( projects/dsp-ui/src ) and some basic unit tests for the demo application playground components ( src/app ). The E2E tests have to be run from the demo application. Unlike the unit tests, they require a running instance of DSP-API compatible with the release specified in vars.mk : API_VERSION := v13.12.0 Before running the E2E tests, reload the data in DSP-API's db. The E2E tests can be run as follows: npm run webdriver-update npm run e2e DSP-UI Library Developement Adding New Components etc. to the Library Install Angular CLI globally: npm install -g @angular/cli To add additional components etc. to a module of the library, run: ng generate component [path/in/the/module/][name-of-component] --project @dasch-swiss/dsp-ui For example, to create a new component test in the action module, run: ng generate component action/test --project @dasch-swiss/dsp-ui This command will create a folder called test inside of projects/dsp-ui/src/lib/action/ containing the component's class, template, style, and spec files. Before testing the new component inside of the demo app, you have to rebuild it after each change: npm run build-lib Alternatively, you can use Live Reloading . Demo Application (Playground) Adding New Component to the Demo Application The demo app demonstrates the functionality of dsp-ui-lib's modules. By default, the demo app's main component routes to the page demonstrating the resource viewer in read mode. Before adding a new component to the demo app, check if the desired demo could be added to an existing component of the demo app. Follow these steps to add a new component to the demo app: create a new component in the demo app: create a new component using Angular CLI in src/app demonstrate a part of dsp-ui-lib (component, service etc.) in the new component of the demo app in AppRoutingModule and AppComponent 's template, set up the routing for your new component in the demo app. Run the Application Locally in Dev Mode With Live Reloading To make changes to the DSP-UI and have your changes reflected immediately upon saving, follow these steps: run npm run build-watchful-lib-dev from the project root directory. open a new tab and run npm run start from the project root directory. Or if you want to connect to the DSP-API on our test server run ng serve --configuration=test-server or npm run start-with-test-server . Please consider which version of DSP-API is currently running on the test server (see webapi: https://api.test.dasch.swiss/version ). Please note that this option is suitable when working on viewer or search module. In some cases like /read , /modify , etc. it doesn't work because it has an automatic login for the root user, which is locked on the test server. now, anytime you make a change to DSP-UI and save, the library will be re-built and the webpage will refresh and you will see the changes. Run the Application in Productive Mode To simulate a production environment, the application should be built with optimization and served locally (not in dev mode, but from a local web server). Install nginx on your system, e.g. brew install nginx for mac OS. Check the documentation for more information. Create a configuration file for the test application. The example defines a configuration file /usr/local/etc/nginx/servers/dspuiapp.conf for macOS. Substitute $abs_path_to_lib with the actual absolute path on your system pointing to the project root. Substitute $dsp-ui_folder_name with the folder name of the app build in dist . server { listen 8090; server_name dspuiapp.local; root /$abs_path_to_lib/dist/$dsp-ui_folder_name; location / { try_files $uri $uri/ /index.html; } access_log /usr/local/etc/nginx/logs/dspuiapp.local.access.log; } Add an entry to your /etc/hosts : 127.0.0.1 dspuiapp.local Create an empty file dspuiapp.local.access.log in /usr/local/etc/nginx/logs (you might have to create the folder logs first) Start nginx (if nginx is already running, stop it first: nginx : nginx -s stop ) Build the library: npm run build-lib Build the test app with optimization: npm run build-app Access it via http://dspuiapp.local:8090 Build and Run the Application in Docker To build and run the application in Docker, do the following: docker build --tag app:0.1 . (you can use any tag name you want) docker run -v ~/localdir/config.prod.json:/public/config/config.prod.json --publish 4200:4200 --detach --name myname app:0.1 The first step builds the lib and app in Docker. Make sure to delete the contents of the dist folder on your local system first. The second step runs a container based on the image built in the previous step: -v mounts a config file from your local file system in the Docker container, so you can set the config. --publish maps the port on your local machine to the port in the Docker container. You can now access the app on your local machine under http://localhost:4200/ . Architecture of the Library See design documentation . Local Publishing of DSP-UI The demo application uses the locally built version of DSP-UI, see the repository's structure . If you want to install an unpublished version of DSP-UI in your Angular application, you can use yalc . yalc publishes DSP-UI to a local store. Install yalc : npm install yalc -g Build the library and publish it to the local store: npm run build-app npm run yalc-publish-lib Add the local build your Angular application: yalc add @dasch-swiss/dsp-ui npm install To remove it from your project and restore package.json , run: yalc remove --all Publish a New Version of the Library to NPM Please follow the general DSP documentation about the release process: prepare and publish . Before publishing: Update documentation if necessary and commit the changes Be sure that all dependencies to DSP-JS-LIB and DSP-API are set to the correct version: Update DSP-API version in vars.mk Update DSP-JS version in package.json and run npm install to update the package-lock.json Update DSP-JS version in section peerDependencies of projects/dsp-ui/package.json A new version will be published with each github release as it's part of github actions' workflow. To make a new release, you have to merge the open release PR as described here . The new package will be available on https://www.npmjs.com/package/@dasch-swiss/dsp-ui .","title":"How to contribute"},{"location":"how-to-contribute/#how-to-contribute-to-this-project","text":"If you are interested in contributing to this project, please read our general DSP contribution guidelines first.","title":"How to Contribute to this Project"},{"location":"how-to-contribute/#structure-of-this-project","text":"This project consists of two main parts: The Angular library DSP-UI (@dasch-swiss/dsp-ui) in project/dsp-ui . The demo Angular Application (Playground) in src/app . The Angular library contains the code that is published on NPM. The demo Angular application's purpose is to demonstrate the library's functionality. The library needs to be built first in order to use it within the demo application. The demo application uses the locally built version of @dasch-swiss/dsp-ui which is configured in tsconfig.json ( compilerOptions.paths ), see Angular docs .","title":"Structure of this Project"},{"location":"how-to-contribute/#prerequisites","text":"","title":"Prerequisites"},{"location":"how-to-contribute/#nodejs","text":"Angular requires a current, active LTS, or maintenance LTS version of Node.js. We recommend using n , a tool that installs and manages Node.js versions on your local system.","title":"Node.js"},{"location":"how-to-contribute/#npm-package-manager","text":"Angular requires the npm package manager .","title":"NPM package manager"},{"location":"how-to-contribute/#dsp-api","text":"The demo application requires a running instance of DSP-API (Knora) compatible with the version defined in vars.mk : API_VERSION := v13.12.0","title":"DSP-API"},{"location":"how-to-contribute/#first-steps","text":"Clone this repository: git clone https://github.com/dasch-swiss/dsp-ui-lib/ Install the dependencies with: npm install Build the library with: npm run build-lib Run the demo application: ng s And access http://localhost:4200 in your browser.","title":"First Steps"},{"location":"how-to-contribute/#scripts-for-development","text":"The following scripts can be used for development:","title":"Scripts For Development"},{"location":"how-to-contribute/#testing","text":"npm test : runs the unit tests of the demo application and the lib's unit tests. npm test-lib : runs the lib's unit tests in headless mode (no browser UI). npm test-lib-local : runs the lib's unit test with the browser UI (for local development of the lib). npm run webdriver-update : installs Chrome webdriver in the required version for the E2E tests. npm run e2e : runs the E2E tests from the demo application, see section Unit Tests and E2E Tests .","title":"Testing"},{"location":"how-to-contribute/#building","text":"npm run build-lib : builds the lib in productive mode npm run build-lib-dev : builds the lib in development mode npm build-app : builds the demo application in productive mode npm run yalc-publish-lib : builds the lib and publishes it locally using yalc .","title":"Building"},{"location":"how-to-contribute/#library-build-options","text":"The library is built in productive mode for publication, using tsconfig.lib.prod.json . To perform additional checks during development, the library can be built in development mode, using tsconfig.lib.json . Development builds use Ivy and perform strict template checks .","title":"Library Build Options"},{"location":"how-to-contribute/#unit-tests-and-e2e-tests","text":"There are unit tests for the lib ( projects/dsp-ui/src ) and some basic unit tests for the demo application playground components ( src/app ). The E2E tests have to be run from the demo application. Unlike the unit tests, they require a running instance of DSP-API compatible with the release specified in vars.mk : API_VERSION := v13.12.0 Before running the E2E tests, reload the data in DSP-API's db. The E2E tests can be run as follows: npm run webdriver-update npm run e2e","title":"Unit Tests and E2E Tests"},{"location":"how-to-contribute/#dsp-ui-library-developement","text":"","title":"DSP-UI Library Developement"},{"location":"how-to-contribute/#adding-new-components-etc-to-the-library","text":"Install Angular CLI globally: npm install -g @angular/cli To add additional components etc. to a module of the library, run: ng generate component [path/in/the/module/][name-of-component] --project @dasch-swiss/dsp-ui For example, to create a new component test in the action module, run: ng generate component action/test --project @dasch-swiss/dsp-ui This command will create a folder called test inside of projects/dsp-ui/src/lib/action/ containing the component's class, template, style, and spec files. Before testing the new component inside of the demo app, you have to rebuild it after each change: npm run build-lib Alternatively, you can use Live Reloading .","title":"Adding New Components etc. to the Library"},{"location":"how-to-contribute/#demo-application-playground","text":"","title":"Demo Application (Playground)"},{"location":"how-to-contribute/#adding-new-component-to-the-demo-application","text":"The demo app demonstrates the functionality of dsp-ui-lib's modules. By default, the demo app's main component routes to the page demonstrating the resource viewer in read mode. Before adding a new component to the demo app, check if the desired demo could be added to an existing component of the demo app. Follow these steps to add a new component to the demo app: create a new component in the demo app: create a new component using Angular CLI in src/app demonstrate a part of dsp-ui-lib (component, service etc.) in the new component of the demo app in AppRoutingModule and AppComponent 's template, set up the routing for your new component in the demo app.","title":"Adding New Component to the Demo Application"},{"location":"how-to-contribute/#run-the-application-locally-in-dev-mode-with-live-reloading","text":"To make changes to the DSP-UI and have your changes reflected immediately upon saving, follow these steps: run npm run build-watchful-lib-dev from the project root directory. open a new tab and run npm run start from the project root directory. Or if you want to connect to the DSP-API on our test server run ng serve --configuration=test-server or npm run start-with-test-server . Please consider which version of DSP-API is currently running on the test server (see webapi: https://api.test.dasch.swiss/version ). Please note that this option is suitable when working on viewer or search module. In some cases like /read , /modify , etc. it doesn't work because it has an automatic login for the root user, which is locked on the test server. now, anytime you make a change to DSP-UI and save, the library will be re-built and the webpage will refresh and you will see the changes.","title":"Run the Application Locally in Dev Mode With Live Reloading"},{"location":"how-to-contribute/#run-the-application-in-productive-mode","text":"To simulate a production environment, the application should be built with optimization and served locally (not in dev mode, but from a local web server). Install nginx on your system, e.g. brew install nginx for mac OS. Check the documentation for more information. Create a configuration file for the test application. The example defines a configuration file /usr/local/etc/nginx/servers/dspuiapp.conf for macOS. Substitute $abs_path_to_lib with the actual absolute path on your system pointing to the project root. Substitute $dsp-ui_folder_name with the folder name of the app build in dist . server { listen 8090; server_name dspuiapp.local; root /$abs_path_to_lib/dist/$dsp-ui_folder_name; location / { try_files $uri $uri/ /index.html; } access_log /usr/local/etc/nginx/logs/dspuiapp.local.access.log; } Add an entry to your /etc/hosts : 127.0.0.1 dspuiapp.local Create an empty file dspuiapp.local.access.log in /usr/local/etc/nginx/logs (you might have to create the folder logs first) Start nginx (if nginx is already running, stop it first: nginx : nginx -s stop ) Build the library: npm run build-lib Build the test app with optimization: npm run build-app Access it via http://dspuiapp.local:8090","title":"Run the Application in Productive Mode"},{"location":"how-to-contribute/#build-and-run-the-application-in-docker","text":"To build and run the application in Docker, do the following: docker build --tag app:0.1 . (you can use any tag name you want) docker run -v ~/localdir/config.prod.json:/public/config/config.prod.json --publish 4200:4200 --detach --name myname app:0.1 The first step builds the lib and app in Docker. Make sure to delete the contents of the dist folder on your local system first. The second step runs a container based on the image built in the previous step: -v mounts a config file from your local file system in the Docker container, so you can set the config. --publish maps the port on your local machine to the port in the Docker container. You can now access the app on your local machine under http://localhost:4200/ .","title":"Build and Run the Application in Docker"},{"location":"how-to-contribute/#architecture-of-the-library","text":"See design documentation .","title":"Architecture of the Library"},{"location":"how-to-contribute/#local-publishing-of-dsp-ui","text":"The demo application uses the locally built version of DSP-UI, see the repository's structure . If you want to install an unpublished version of DSP-UI in your Angular application, you can use yalc . yalc publishes DSP-UI to a local store. Install yalc : npm install yalc -g Build the library and publish it to the local store: npm run build-app npm run yalc-publish-lib Add the local build your Angular application: yalc add @dasch-swiss/dsp-ui npm install To remove it from your project and restore package.json , run: yalc remove --all","title":"Local Publishing of DSP-UI"},{"location":"how-to-contribute/#publish-a-new-version-of-the-library-to-npm","text":"Please follow the general DSP documentation about the release process: prepare and publish . Before publishing: Update documentation if necessary and commit the changes Be sure that all dependencies to DSP-JS-LIB and DSP-API are set to the correct version: Update DSP-API version in vars.mk Update DSP-JS version in package.json and run npm install to update the package-lock.json Update DSP-JS version in section peerDependencies of projects/dsp-ui/package.json A new version will be published with each github release as it's part of github actions' workflow. To make a new release, you have to merge the open release PR as described here . The new package will be available on https://www.npmjs.com/package/@dasch-swiss/dsp-ui .","title":"Publish a New Version of the Library to NPM"},{"location":"how-to-contribute/design-documentation/","text":"Design Documentation Action Module The action module contains various directives, components, and pipes which can be used with ease by other parts of the library. Pipes Array Tranformation Any pipe relating to the transformation of arrays must be placed in the folder called \"array-transformation\". Examples include reversing or sorting an array. Formatting Any pipe relating to formatting must be placed in the folder called \"formatting\". Examples include returning a string depending on the value of a boolean or returning a formatted date. String Transformation Any pipe relating to the transformation of strings must be placed in the folder called \"string-transformation\". For example, a pipe that truncates a string after a certain amount of characters. Viewer Module Resource View Component The ResourceViewComponent initially gets a resource and passes the retrieved information to its child components to deal with the values. As the user adds more values, edits existing ones etc., these changes are reflected in ResourceViewComponent.resPropInfoVals . This means the ResourceViewComponent.resource that was initially retrieved still represents the state of the past since its values are not updated. Therefore, ResourceViewComponent.resPropInfoVals is used solely to represent a resource's values in the template. When updating, adding, or deleting an XML text value, an additional request is performed to retrieve the resource's standoff link values which are then updated in ResourceViewComponent.resPropInfoVals . CRUD UI Components The viewer module provides components to perform CRUD operations. These are split into two groups called value and operation components. The value components deal with the specifics of each value type supported by DSP-API, the operation components deal with the actual CRUD operations. With the current design, an operation component can be written in a generic way so that it supports all value types. Therefore, there is no need to write value specific operation components. Value Components Abstract Base Class An Angular component per value type has been created. Each of these components is a subclass of the abstract class BaseValueComponent . A value component knows how to display a value of a given type in the UI and how to update it or create a new value interacting with a user in the UI. The base class defines the following members (some of them are declared as abstract and have to be implemented in the value components.): @Input abstract displayValue?: ReadValue : value to be displayed and/or updated, if any. The value has to be a subclass of ReadValue . @Input mode: 'read' | 'update' | 'create' | 'search' : sets the mode of the value component. @Input() valueRequiredValidator? : controls if the value should be required. Defaults to true. members abstract valueFormControl: FormControl for the value and abstract commentFormControl: FormControl its comment. abstract getInitValue(): any : gets the value from the displayValue, if any. getInitComment: : string | null gets the comment from displayValue, if any. standardValidatorFunc(val: any, comment: string, commentCtrl: FormControl): ValidatorFn : generates a validator that checks if the value changed by the user is different from the existing version (in update mode): the comment has to at least be different from the previous version for the value to be valid. standardValueComparisonFunc(initValue: any, curValue: any): boolean : method called by standardValidatorFunc that checks two given values for equality. This method has to be overridden for complex types (e.g., an interval, which is represented as an object). abstract customValidators: ValidatorFn[] : contains validators for type checking (e.g, to check that a number is an integer). resetFormControl(): void resets the values in the FormControl s and the validators for the given mode and displayValue . abstract getNewValue(): CreateValue | false gets a new value from the form. abstract getUpdatedValue(): UpdateValue | false gets an updated value from the form. isEmptyVal(): boolean : checks if the value is empty. Each value component contains the necessary logic to convert between a ReadValue and the representation in the UI as well as to convert between an edited value in the UI and a UpdateValue or CreateValue . Validation Each value component creates a form and sets the appropriate validators that can be data type specific. By default, a value is required and cannot be empty, i.e., the Validators.required is set. The default behaviour can be changed by setting @Input: valueRequiredValidator to false, in which case empty values are allowed. Note that the method getNewValue() will filter out empty values, i.e., return false instead of an instance of CreateValue . This is used in the event that a user should be able to submit a form without filling out every form field. Simple and Complex Values BaseValueComponent handles most of the logic needed for simple values such as an integer or a URI value. A value is considered simple if it can be represented with a primitive type in the FormControl . An integer value, for instance, can simply be represented as a number in TypeScript. Complex types, however, have to be represented as an object in the FormControl . An interval, for example, is an object with a start and end that is set in the FormControl . To handle this complexity in the template, the interface ControlValueAccessor has to be implemented. ControlValueAccessor allows the delegation of the complexity to a dedicated component that can communicate with the FormControl . Complex values have a so-called \"wrapped component\" implementing ControlValueAccessor in which they pass the complex value to. An integer value can be handled directly in the value component's template: <input matInput [formControlName]=\"'intValue'\" class=\"value\" placeholder=\"Int value\" type=\"number\"> In the case of an interval, the value component delegates the complex value to a dedicated component: <dsp-interval-input [formControlName]=\"'intervalValue'\" class=\"value\" placeholder=\"Interval value\"></dsp-interval-input> IntervalInputComponent thus receives an object Interval that it handles in its value setter and getter to communicate with the parent FormControl 's value: @Input() get value(): Interval | null { const userInput = this.form.value; if (userInput.start !== null && userInput.end !== null) { return new Interval(userInput.start, userInput.end); } return null; } set value(interval: Interval | null) { if (interval !== null) { this.form.setValue({start: interval.start, end: interval.end}); } else { this.form.setValue({start: null, end: null}); } this.stateChanges.next(); } IntervalInputComponent defines its own FormControl s for the interval's start and end. Since these are primitive values (numbers), they can be handled directly in the template. In some cases, primitive values also need to be handled using ControlValueAccessor . This is necessary in the case of the color value because a third-party lib is used. Operation Components Operation components work with any value. They control the value components' inputs displayValue and mode . They are responsible for the communication with the DSP-API using @dasch-swiss/dsp-js when updating or creating a value. DisplayEditComponent is an operation component that displays an existing value and makes it editable if the user has the necessary permissions. It works for all value types by choosing the apt value component in its template: <span [ngSwitch]=\"valueTypeOrClass\"> <dsp-text-value-as-string class=\"parent-value-component\" #displayVal *ngSwitchCase=\"'ReadTextValueAsString'\" [mode]=\"mode\" [displayValue]=\"displayValue\"></dsp-text-value-as-string> <dsp-text-value-as-html class=\"parent-value-component\" #displayVal *ngSwitchCase=\"'ReadTextValueAsHtml'\" [mode]=\"mode\" [displayValue]=\"displayValue\"></dsp-text-value-as-html> <dsp-int-value class=\"parent-value-component\" #displayVal *ngSwitchCase=\"constants.IntValue\" [mode]=\"mode\" [displayValue]=\"displayValue\"></dsp-int-value> ... </span> The value component's selector is chosen from valueTypeOrClass . Since all value components share the same interface, they can all be handled alike. Value components may have additional specific inputs for configuration that can be handled in DisplayEditComponent 's template as well ,e.g., additional configuration of how do display a date. Integration of CKEditor General Setup To edit XML, the viewer module relies on CKEditor. TextValueAsXMLComponent integrates the CKEditor library for Angular. In addition, a custom build of CKEditor is needed which is accessible on GitHub . To make a new custom build, follow the instructions . Note that currently only the standard mapping is supported. Handling Internal Links When Displaying Text When a text created with CKEditor is shown in read-mode, click and hover events on internal links can be reacted to by applying the directive TextValueHtmlLinkDirective with the selector dspHtmlLink . Internal links have the class \"salsah-link\". Integration of the MatDatepicker The MatDatepicker cannot be used as part of the CRUD UI components due to its limitations in terms of precision and era selection. As a replacement, DateInputTextComponent is being used allowing for year, month, and day precision and era selection. Search Module The search module allows different ways of searching in order to make simple or complex searches in DSP-API. This module contains various components you can use to search and all of them can either be used individually or in combination with one another using the search panel. Search-panel This is a fully-customizable panel that allows you to assemble the search components and the filters you need in a configurable way. You can set the following parameters defined as @Inputs in dsp-search-panel: route: string; url-route for search results filterbyproject: string; project iri to limit search results to a specific project projectfilter: boolean; provides a drop-down menu of all available projects allowing the user to choose which project to search in advanced: boolean; additional menu with advanced search expert: boolean; additional menu with expert search / Gravsearch \"editor\" If everything is set to false or undefined, the search-panel will be a simple full-text search. Fulltext search The full text search quickly finds all instances of a term in DSP-API. It can be restricted to a certain project. Expert search The expert search is a textarea which allows you to manually write Gravsearch queries if you are comfortable with the language and want more precise results. The textarea content contains a default Gravsearch query as an example for the user. It is possible to reset the field back to the default query. Advanced search The advanced search is a search form that allows for the specification of a resource class and and the values of its properties to create a Gravsearch query. Structure The advanced search consists of the following components: AdvancedSearchComponent : Main form: Reset and submit buttons, buttons to add and remove properties. SelectOntologyComponent : Select an ontology from a list. ResourceAndPropertySelectionComponent : Parent component that contains SelectResourceClassComponent and SelectPropertyComponent for recursive reuse. SelectResourceClassComponent : Select a resource class from a list. SelectPropertyComponent : Select a property from a list. SpecifyPropertyValueComponent : Specify a comparison operator and a value for a chosen property. SearchBooleanValueComponent : Specify a Boolean value. SearchDateValueComponent : Specify a date value. SearchDecimalValueComponent : Specify a decimal value. SearchIntegerValueComponent : Specify an integer value. SearchLinkValueComponent : Specify the target of a link property. SearchResourceComponent : Specify the class and/or properties of a linked resource (uses ResourceAndPropertySelectionComponent , see below). SearchListValueComponent : Specify a list value. SearchDisplayListComponent : Displays the children of a list node recursively. TextValueComponent : Specify a text value. UriValueComponent : Specify a URI value. Component Interaction The AdvancedSearchComponent ' reacts to the selection of an ontology via the @Output of SelectOntologyComponent . When an ontology is selected, AdvancedSearchComponent initialises the resource classes and properties of the selected ontology. These are then displayed with SelectResourceClassComponent and SelectPropertyComponent respectively. When initialised, AdvancedSearchComponent only shows the ontology selection. The choice of a resource class is optional. When a resource class is chosen, AdvancedSearchComponent reacts to this via the @Output of SelectResourceClassComponent . The properties of the chosen resource class are then displayed in SelectPropertyComponent . The selection of a resource class can be undone (\"no selection\"). When a property is chosen, a comparison operator can be specified. Once a comparison operator is specified other than \"EXISTS\", a value can be specified using SpecifyPropertyValueComponent . Depending on the value type of the property, SpecifyPropertyValueComponent chooses the apt component to let the user enter a value. Recursive Use of ResourceAndPropertySelectionComponent ResourceAndPropertySelectionComponent is used in the main form and in SearchResourceComponent 's template (if the user chooses the operator Match for a linking property) to allow for searching linked resources by specifying their class and/or properties. Only one level of recursion is allowed, i.e. linking properties on the linked resource cannot use the Match operator. Sort criteria can only be chosen on the level of the main resource. The boolean @Input toplevel distinguishes the top level from the level below. Form Validation AdvancedSearchComponent creates the main form that is then passed down to the child components. Each child component that requires form validation creates an own form which is attached to the main form using addControl on the main FormGroup . When a component is destroyed or reinitialised, the component's form is removed using removeControl on the main FormGroup . Both adding and removing to and from the main FormGroup have to be performed as async tasks to avoid check detection errors . The query can only be submitted if the main form is valid. Some additional logic is handled in AdvancedSearchComponent 's method validateForm . Query Generation AdvancedSearchComponent gets the IRI of the specified resource class, if any. It also gets an array of properties with their values ( PropertyWithValue[] ) to search for. These are then converted to a Gravsearch query using a service.","title":"Design Documentation"},{"location":"how-to-contribute/design-documentation/#design-documentation","text":"","title":"Design Documentation"},{"location":"how-to-contribute/design-documentation/#action-module","text":"The action module contains various directives, components, and pipes which can be used with ease by other parts of the library.","title":"Action Module"},{"location":"how-to-contribute/design-documentation/#pipes","text":"","title":"Pipes"},{"location":"how-to-contribute/design-documentation/#array-tranformation","text":"Any pipe relating to the transformation of arrays must be placed in the folder called \"array-transformation\". Examples include reversing or sorting an array.","title":"Array Tranformation"},{"location":"how-to-contribute/design-documentation/#formatting","text":"Any pipe relating to formatting must be placed in the folder called \"formatting\". Examples include returning a string depending on the value of a boolean or returning a formatted date.","title":"Formatting"},{"location":"how-to-contribute/design-documentation/#string-transformation","text":"Any pipe relating to the transformation of strings must be placed in the folder called \"string-transformation\". For example, a pipe that truncates a string after a certain amount of characters.","title":"String Transformation"},{"location":"how-to-contribute/design-documentation/#viewer-module","text":"","title":"Viewer Module"},{"location":"how-to-contribute/design-documentation/#resource-view-component","text":"The ResourceViewComponent initially gets a resource and passes the retrieved information to its child components to deal with the values. As the user adds more values, edits existing ones etc., these changes are reflected in ResourceViewComponent.resPropInfoVals . This means the ResourceViewComponent.resource that was initially retrieved still represents the state of the past since its values are not updated. Therefore, ResourceViewComponent.resPropInfoVals is used solely to represent a resource's values in the template. When updating, adding, or deleting an XML text value, an additional request is performed to retrieve the resource's standoff link values which are then updated in ResourceViewComponent.resPropInfoVals .","title":"Resource View Component"},{"location":"how-to-contribute/design-documentation/#crud-ui-components","text":"The viewer module provides components to perform CRUD operations. These are split into two groups called value and operation components. The value components deal with the specifics of each value type supported by DSP-API, the operation components deal with the actual CRUD operations. With the current design, an operation component can be written in a generic way so that it supports all value types. Therefore, there is no need to write value specific operation components.","title":"CRUD UI Components"},{"location":"how-to-contribute/design-documentation/#value-components","text":"","title":"Value Components"},{"location":"how-to-contribute/design-documentation/#abstract-base-class","text":"An Angular component per value type has been created. Each of these components is a subclass of the abstract class BaseValueComponent . A value component knows how to display a value of a given type in the UI and how to update it or create a new value interacting with a user in the UI. The base class defines the following members (some of them are declared as abstract and have to be implemented in the value components.): @Input abstract displayValue?: ReadValue : value to be displayed and/or updated, if any. The value has to be a subclass of ReadValue . @Input mode: 'read' | 'update' | 'create' | 'search' : sets the mode of the value component. @Input() valueRequiredValidator? : controls if the value should be required. Defaults to true. members abstract valueFormControl: FormControl for the value and abstract commentFormControl: FormControl its comment. abstract getInitValue(): any : gets the value from the displayValue, if any. getInitComment: : string | null gets the comment from displayValue, if any. standardValidatorFunc(val: any, comment: string, commentCtrl: FormControl): ValidatorFn : generates a validator that checks if the value changed by the user is different from the existing version (in update mode): the comment has to at least be different from the previous version for the value to be valid. standardValueComparisonFunc(initValue: any, curValue: any): boolean : method called by standardValidatorFunc that checks two given values for equality. This method has to be overridden for complex types (e.g., an interval, which is represented as an object). abstract customValidators: ValidatorFn[] : contains validators for type checking (e.g, to check that a number is an integer). resetFormControl(): void resets the values in the FormControl s and the validators for the given mode and displayValue . abstract getNewValue(): CreateValue | false gets a new value from the form. abstract getUpdatedValue(): UpdateValue | false gets an updated value from the form. isEmptyVal(): boolean : checks if the value is empty. Each value component contains the necessary logic to convert between a ReadValue and the representation in the UI as well as to convert between an edited value in the UI and a UpdateValue or CreateValue .","title":"Abstract Base Class"},{"location":"how-to-contribute/design-documentation/#validation","text":"Each value component creates a form and sets the appropriate validators that can be data type specific. By default, a value is required and cannot be empty, i.e., the Validators.required is set. The default behaviour can be changed by setting @Input: valueRequiredValidator to false, in which case empty values are allowed. Note that the method getNewValue() will filter out empty values, i.e., return false instead of an instance of CreateValue . This is used in the event that a user should be able to submit a form without filling out every form field.","title":"Validation"},{"location":"how-to-contribute/design-documentation/#simple-and-complex-values","text":"BaseValueComponent handles most of the logic needed for simple values such as an integer or a URI value. A value is considered simple if it can be represented with a primitive type in the FormControl . An integer value, for instance, can simply be represented as a number in TypeScript. Complex types, however, have to be represented as an object in the FormControl . An interval, for example, is an object with a start and end that is set in the FormControl . To handle this complexity in the template, the interface ControlValueAccessor has to be implemented. ControlValueAccessor allows the delegation of the complexity to a dedicated component that can communicate with the FormControl . Complex values have a so-called \"wrapped component\" implementing ControlValueAccessor in which they pass the complex value to. An integer value can be handled directly in the value component's template: <input matInput [formControlName]=\"'intValue'\" class=\"value\" placeholder=\"Int value\" type=\"number\"> In the case of an interval, the value component delegates the complex value to a dedicated component: <dsp-interval-input [formControlName]=\"'intervalValue'\" class=\"value\" placeholder=\"Interval value\"></dsp-interval-input> IntervalInputComponent thus receives an object Interval that it handles in its value setter and getter to communicate with the parent FormControl 's value: @Input() get value(): Interval | null { const userInput = this.form.value; if (userInput.start !== null && userInput.end !== null) { return new Interval(userInput.start, userInput.end); } return null; } set value(interval: Interval | null) { if (interval !== null) { this.form.setValue({start: interval.start, end: interval.end}); } else { this.form.setValue({start: null, end: null}); } this.stateChanges.next(); } IntervalInputComponent defines its own FormControl s for the interval's start and end. Since these are primitive values (numbers), they can be handled directly in the template. In some cases, primitive values also need to be handled using ControlValueAccessor . This is necessary in the case of the color value because a third-party lib is used.","title":"Simple and Complex Values"},{"location":"how-to-contribute/design-documentation/#operation-components","text":"Operation components work with any value. They control the value components' inputs displayValue and mode . They are responsible for the communication with the DSP-API using @dasch-swiss/dsp-js when updating or creating a value. DisplayEditComponent is an operation component that displays an existing value and makes it editable if the user has the necessary permissions. It works for all value types by choosing the apt value component in its template: <span [ngSwitch]=\"valueTypeOrClass\"> <dsp-text-value-as-string class=\"parent-value-component\" #displayVal *ngSwitchCase=\"'ReadTextValueAsString'\" [mode]=\"mode\" [displayValue]=\"displayValue\"></dsp-text-value-as-string> <dsp-text-value-as-html class=\"parent-value-component\" #displayVal *ngSwitchCase=\"'ReadTextValueAsHtml'\" [mode]=\"mode\" [displayValue]=\"displayValue\"></dsp-text-value-as-html> <dsp-int-value class=\"parent-value-component\" #displayVal *ngSwitchCase=\"constants.IntValue\" [mode]=\"mode\" [displayValue]=\"displayValue\"></dsp-int-value> ... </span> The value component's selector is chosen from valueTypeOrClass . Since all value components share the same interface, they can all be handled alike. Value components may have additional specific inputs for configuration that can be handled in DisplayEditComponent 's template as well ,e.g., additional configuration of how do display a date.","title":"Operation Components"},{"location":"how-to-contribute/design-documentation/#integration-of-ckeditor","text":"","title":"Integration of CKEditor"},{"location":"how-to-contribute/design-documentation/#general-setup","text":"To edit XML, the viewer module relies on CKEditor. TextValueAsXMLComponent integrates the CKEditor library for Angular. In addition, a custom build of CKEditor is needed which is accessible on GitHub . To make a new custom build, follow the instructions . Note that currently only the standard mapping is supported.","title":"General Setup"},{"location":"how-to-contribute/design-documentation/#handling-internal-links-when-displaying-text","text":"When a text created with CKEditor is shown in read-mode, click and hover events on internal links can be reacted to by applying the directive TextValueHtmlLinkDirective with the selector dspHtmlLink . Internal links have the class \"salsah-link\".","title":"Handling Internal Links When Displaying Text"},{"location":"how-to-contribute/design-documentation/#integration-of-the-matdatepicker","text":"The MatDatepicker cannot be used as part of the CRUD UI components due to its limitations in terms of precision and era selection. As a replacement, DateInputTextComponent is being used allowing for year, month, and day precision and era selection.","title":"Integration of the MatDatepicker"},{"location":"how-to-contribute/design-documentation/#search-module","text":"The search module allows different ways of searching in order to make simple or complex searches in DSP-API. This module contains various components you can use to search and all of them can either be used individually or in combination with one another using the search panel.","title":"Search Module"},{"location":"how-to-contribute/design-documentation/#search-panel","text":"This is a fully-customizable panel that allows you to assemble the search components and the filters you need in a configurable way. You can set the following parameters defined as @Inputs in dsp-search-panel: route: string; url-route for search results filterbyproject: string; project iri to limit search results to a specific project projectfilter: boolean; provides a drop-down menu of all available projects allowing the user to choose which project to search in advanced: boolean; additional menu with advanced search expert: boolean; additional menu with expert search / Gravsearch \"editor\" If everything is set to false or undefined, the search-panel will be a simple full-text search.","title":"Search-panel"},{"location":"how-to-contribute/design-documentation/#fulltext-search","text":"The full text search quickly finds all instances of a term in DSP-API. It can be restricted to a certain project.","title":"Fulltext search"},{"location":"how-to-contribute/design-documentation/#expert-search","text":"The expert search is a textarea which allows you to manually write Gravsearch queries if you are comfortable with the language and want more precise results. The textarea content contains a default Gravsearch query as an example for the user. It is possible to reset the field back to the default query.","title":"Expert search"},{"location":"how-to-contribute/design-documentation/#advanced-search","text":"The advanced search is a search form that allows for the specification of a resource class and and the values of its properties to create a Gravsearch query.","title":"Advanced search"},{"location":"how-to-contribute/design-documentation/#structure","text":"The advanced search consists of the following components: AdvancedSearchComponent : Main form: Reset and submit buttons, buttons to add and remove properties. SelectOntologyComponent : Select an ontology from a list. ResourceAndPropertySelectionComponent : Parent component that contains SelectResourceClassComponent and SelectPropertyComponent for recursive reuse. SelectResourceClassComponent : Select a resource class from a list. SelectPropertyComponent : Select a property from a list. SpecifyPropertyValueComponent : Specify a comparison operator and a value for a chosen property. SearchBooleanValueComponent : Specify a Boolean value. SearchDateValueComponent : Specify a date value. SearchDecimalValueComponent : Specify a decimal value. SearchIntegerValueComponent : Specify an integer value. SearchLinkValueComponent : Specify the target of a link property. SearchResourceComponent : Specify the class and/or properties of a linked resource (uses ResourceAndPropertySelectionComponent , see below). SearchListValueComponent : Specify a list value. SearchDisplayListComponent : Displays the children of a list node recursively. TextValueComponent : Specify a text value. UriValueComponent : Specify a URI value.","title":"Structure"},{"location":"how-to-contribute/design-documentation/#component-interaction","text":"The AdvancedSearchComponent ' reacts to the selection of an ontology via the @Output of SelectOntologyComponent . When an ontology is selected, AdvancedSearchComponent initialises the resource classes and properties of the selected ontology. These are then displayed with SelectResourceClassComponent and SelectPropertyComponent respectively. When initialised, AdvancedSearchComponent only shows the ontology selection. The choice of a resource class is optional. When a resource class is chosen, AdvancedSearchComponent reacts to this via the @Output of SelectResourceClassComponent . The properties of the chosen resource class are then displayed in SelectPropertyComponent . The selection of a resource class can be undone (\"no selection\"). When a property is chosen, a comparison operator can be specified. Once a comparison operator is specified other than \"EXISTS\", a value can be specified using SpecifyPropertyValueComponent . Depending on the value type of the property, SpecifyPropertyValueComponent chooses the apt component to let the user enter a value.","title":"Component Interaction"},{"location":"how-to-contribute/design-documentation/#recursive-use-of-resourceandpropertyselectioncomponent","text":"ResourceAndPropertySelectionComponent is used in the main form and in SearchResourceComponent 's template (if the user chooses the operator Match for a linking property) to allow for searching linked resources by specifying their class and/or properties. Only one level of recursion is allowed, i.e. linking properties on the linked resource cannot use the Match operator. Sort criteria can only be chosen on the level of the main resource. The boolean @Input toplevel distinguishes the top level from the level below.","title":"Recursive Use of ResourceAndPropertySelectionComponent"},{"location":"how-to-contribute/design-documentation/#form-validation","text":"AdvancedSearchComponent creates the main form that is then passed down to the child components. Each child component that requires form validation creates an own form which is attached to the main form using addControl on the main FormGroup . When a component is destroyed or reinitialised, the component's form is removed using removeControl on the main FormGroup . Both adding and removing to and from the main FormGroup have to be performed as async tasks to avoid check detection errors . The query can only be submitted if the main form is valid. Some additional logic is handled in AdvancedSearchComponent 's method validateForm .","title":"Form Validation"},{"location":"how-to-contribute/design-documentation/#query-generation","text":"AdvancedSearchComponent gets the IRI of the specified resource class, if any. It also gets an array of properties with their values ( PropertyWithValue[] ) to search for. These are then converted to a Gravsearch query using a service.","title":"Query Generation"},{"location":"how-to-contribute/docs-documentation/","text":"DSP-UI Documentation This is the DSP-UI library documentation, based on MkDocs and published under http://dasch-swiss.github.io/dsp-ui-lib . Contribute If you would like to add your own contributions to the docs, please read the following information regarding the file structure to ensure you follow the same structure. File structure The documentation consists of three main topics with subordinate themes: index contains all information about the DSP-UI how-to-use contains all about the usage of the DSP-UI modules Getting Started = All about the installation and init configuration Core = Documentation for the core module content Viewer = Documentation for the viewer module content Search = Documentation for the search module content Action = Documentation for the action module content how-to-contribute contains all information for people who wants to contribute to DSP-UI Contribution = How to contribute incl. link to the general DSP contribution guidelines ( https://docs.dasch.swiss/developers/dsp/contribution/ ) Design Documentation = Structure conventions Docs Documentation = This document Release Notes = Contains the CHANGELOG file of DSP-UI Images like screenshots and so on have to be stored in assets/images . The mkdocs.yml file is present in the top-level directory of the repo and the source files are in the docs/ folder. Plugins have to be defined in requirements.txt and in the github actions workflow deploy-docs step under EXTRA_PACKAGES . Getting Started To run the documentation locally you'll need Python installed, as well as the Python package manager pip . You can check if you already have these installed by running the following commands from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) MkDocs supports Python versions 3.5, 3.6, 3.7, 3.8, and pypy3. Installing dependencies Install the required packages by running the following command: make install-requirements Running the documentation locally MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml (repository's root folder) configuration file, and then start the server by running the following command: $ make docs-serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes [I 160402 15:50:43 handlers:60] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the documentation start page being. In case you need to clean the project directory, run: make docs-clean To get some help about the make commands, run: make help Building the documentation To build the documentation, run: make docs-build Deploying github page On each release of DSP-UI, a github action script will build and deploy the documentation on dasch-swiss.github.io/dsp-ui-lib . Behind the scenes, MkDocs builds the documentation and uses the mkdocs-deploy-gh-pages actions script to deploy them to the gh-pages. That's it!","title":"Docs Documentation"},{"location":"how-to-contribute/docs-documentation/#dsp-ui-documentation","text":"This is the DSP-UI library documentation, based on MkDocs and published under http://dasch-swiss.github.io/dsp-ui-lib .","title":"DSP-UI Documentation"},{"location":"how-to-contribute/docs-documentation/#contribute","text":"If you would like to add your own contributions to the docs, please read the following information regarding the file structure to ensure you follow the same structure.","title":"Contribute"},{"location":"how-to-contribute/docs-documentation/#file-structure","text":"The documentation consists of three main topics with subordinate themes: index contains all information about the DSP-UI how-to-use contains all about the usage of the DSP-UI modules Getting Started = All about the installation and init configuration Core = Documentation for the core module content Viewer = Documentation for the viewer module content Search = Documentation for the search module content Action = Documentation for the action module content how-to-contribute contains all information for people who wants to contribute to DSP-UI Contribution = How to contribute incl. link to the general DSP contribution guidelines ( https://docs.dasch.swiss/developers/dsp/contribution/ ) Design Documentation = Structure conventions Docs Documentation = This document Release Notes = Contains the CHANGELOG file of DSP-UI Images like screenshots and so on have to be stored in assets/images . The mkdocs.yml file is present in the top-level directory of the repo and the source files are in the docs/ folder. Plugins have to be defined in requirements.txt and in the github actions workflow deploy-docs step under EXTRA_PACKAGES .","title":"File structure"},{"location":"how-to-contribute/docs-documentation/#getting-started","text":"To run the documentation locally you'll need Python installed, as well as the Python package manager pip . You can check if you already have these installed by running the following commands from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) MkDocs supports Python versions 3.5, 3.6, 3.7, 3.8, and pypy3.","title":"Getting Started"},{"location":"how-to-contribute/docs-documentation/#installing-dependencies","text":"Install the required packages by running the following command: make install-requirements","title":"Installing dependencies"},{"location":"how-to-contribute/docs-documentation/#running-the-documentation-locally","text":"MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml (repository's root folder) configuration file, and then start the server by running the following command: $ make docs-serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes [I 160402 15:50:43 handlers:60] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the documentation start page being. In case you need to clean the project directory, run: make docs-clean To get some help about the make commands, run: make help","title":"Running the documentation locally"},{"location":"how-to-contribute/docs-documentation/#building-the-documentation","text":"To build the documentation, run: make docs-build","title":"Building the documentation"},{"location":"how-to-contribute/docs-documentation/#deploying-github-page","text":"On each release of DSP-UI, a github action script will build and deploy the documentation on dasch-swiss.github.io/dsp-ui-lib . Behind the scenes, MkDocs builds the documentation and uses the mkdocs-deploy-gh-pages actions script to deploy them to the gh-pages. That's it!","title":"Deploying github page"},{"location":"how-to-contribute/release-notes/","text":"Changelog 1.8.0 (2021-08-13) Enhancements action: new progress indicator (just for fun) ( #331 ) ( d7a1b63 ) display-edit: disable delete depending on cardinality (DSP-1814) ( #329 ) ( 933bb13 ) 1.7.5 (2021-08-10) Maintenance viewer: return label and id in multiple resource selection (DSP-1842 / DSP-1820) ( #327 ) ( 016e22a ) 1.7.4 (2021-08-03) Bug Fixes action: bug fix in linkify pipe (DSP-1837) ( #325 ) ( 13fb692 ) 1.7.3 (2021-07-30) Bug Fixes viewer: fix several issues in list-view (DSP-1575) ( #324 ) ( 9a76b0a ) Maintenance deps: bump dsp-js to latest version (DSP-1825) ( #322 ) ( 4e8be74 ) 1.7.2 (2021-07-26) Maintenance resource: clean up code and refactoring (DSP-1816) ( #319 ) ( 3b6b32c ) 1.7.1 (2021-07-22) Bug Fixes viewer: emit selected resource always (DSP-1809) ( #317 ) ( c881cb6 ) 1.7.0 (2021-07-16) Enhancements action: intermediate page for selected resources in comparison viewer (DSP-1765) ( #313 ) ( fa4950e ) viewer: add checkbox for every resource in list and grid view (DSP-1711) ( #311 ) ( 1e0381a ) viewer: recognise URLs in text value and convert into link (DSP-1595) ( #315 ) ( f08b50d ) viewer: split pane to compare multiple resource (DSP-1785) ( #316 ) ( b24274e ) 1.6.0 (2021-06-23) Enhancements viewer: improve editing of geonames (DSP-1212) ( #307 ) ( 91bb637 ) viewer: make hex code display optional for color value (DSP-1667) ( #303 ) ( 0b03781 ) viewer: resolve geoname id and show name (DSP-1212) ( #305 ) ( 18ea19b ) Maintenance update: update cal lib and date adapter (DSP-1758) ( #309 ) ( 020b080 ) 1.5.0 (2021-06-10) Enhancements action: only show era if supported by calendar (DSP-1725) ( #302 ) ( 74ceafb ) date input: create new component for date input (DSP-94) ( #298 ) ( d23e844 ) viewer: improve style of date input (DSP-1724) ( #301 ) ( 4c3d1b3 ) 1.4.0 (2021-05-25) Enhancements advanced search: specify linked resource (DSP-1587) ( #293 ) ( 42e3311 ) Documentation advanced search: update naming to advanced search (DSP-1651) ( #295 ) ( 7f8c7e6 ) 1.3.0 (2021-05-07) Enhancements advanced search: try to reuse resource and property selection (DSP-1587) ( #290 ) ( 523af24 ) list-view: Create boolean flag to enable/disable the view switcher ( #294 ) ( 2053020 ) 1.2.5 (2021-05-03) Bug Fixes viewer: set correct rgba value (DSP-1588) ( #288 ) ( 01daed4 ) Maintenance viewer: export value operation events (DSP-1590) ( #291 ) ( a17b8e6 ) 1.2.4 (2021-03-25) Maintenance update angular: update to Angular 11 (DSP-1472) ( #286 ) ( cdc038c ) 1.2.3 (2021-03-22) Maintenance package.json: improve description in package.json ( #283 ) ( 7c8e738 ) update angular 10.2: update to Angular 10 ( #280 ) ( d48c6ff ) 1.2.2 (2021-02-10) Maintenance dependency: update dsp-js to v2.0.0 and dsp-api to v13.2.0 ( #276 ) ( d03aef7 ) dependency: update dsp-js to v2.0.1 and dsp-api to v13.3.1 ( #278 ) ( c27d5f7 ) 1.2.1 (2021-02-02) Documentation update the READMEs and init mkDocs (DSP-1298) ( #271 ) ( b436a31 ) Maintenance bumps DSP-JS and DSP-API version numbers ( #275 ) ( c79e403 ) 1.2.0 (2021-01-28) Enhancements string-literal-input: updates input on label changes ( #269 ) ( 5659391 ) viewer: integrate file upload component in form logic (DSP-1257) ( #264 ) ( 1d208d1 ) Maintenance package.json: update dsp-js ( #265 ) ( 61f6079 ) update dsp-js version to 1.2.1 ( #270 ) ( 3c54c4e ) 1.1.1 (2021-01-18) Bug Fixes Link Value: custom validator should allow null (DSP-1237) ( #261 ) ( 01da692 ) 1.1.0 (2021-01-15) Bug Fixes Action Module Playground & Components Missing Imports ( #97 ) ( 03cc104 ) Boolean add button ( #182 ) ( 636616e ) Date Value Validators: Propagate valueRequiredValidator to child component (DSP-1188) ( #251 ) ( 27502f5 ) Delete Value UI Bug ( #171 ) ( c2dff4d ) display-edit dev build errors ( #106 ) ( c8ad445 ) Interval Value Validators: Propagate valueRequiredValidator to child component (DSP-1193) ( #253 ) ( 3424831 ) search: Detach bug fix ( #205 ) ( 9a5b537 ) Time Value Validators: Propagate valueRequiredValidator to child component (DSP-1218) ( #257 ) ( dd8fd80 ) Update peer dependencies for js-lib ( #177 ) ( d8b8c8e ) Enhancements geoname + uri: add rel attribute for security ( #207 ) ( c76029a ) Maintenance Clean up CHANGELOG and package.json ( #256 ) ( 4ba898b ) release 1.0.0 ( #244 ) ( 77e272a ) release 1.0.1 ( #255 ) ( e9b0f01 ) Update DSP-Api and DSP-JS-Lib ( #236 ) ( 9a8ae79 ) update dsp-js version ( #249 ) ( abca383 ) Update dsp-js-lib ( #242 ) ( 8723bcc ) Update js-lib version number ( #151 ) ( c0b47bb ) 1.0.1 (2021-01-15) Bug Fixes Date Value Validators: Propagate valueRequiredValidator to child component (DSP-1188) ( #251 ) ( 27502f5 ) Interval Value Validators: Propagate valueRequiredValidator to child component (DSP-1193) ( #253 ) ( 3424831 ) Time Value Validators: Propagate valueRequiredValidator to child component (DSP-1218) ( #257 ) ( dd8fd80 ) fix: Value Form Control Name (DSP-1186) ( #250 ) ( 3098bfa ) Maintenance Clean up CHANGELOG and package.json ( #256 ) ( 4ba898b ) 1.0.0 (2020-12-18) Bug Fixes search: Detach bug fix ( #205 ) ( 9a5b537 ) Action Module Playground & Components Missing Imports ( #97 ) ( 03cc104 ) Boolean add button ( #182 ) ( 636616e ) Delete Value UI Bug ( #171 ) ( c2dff4d ) display-edit dev build errors ( #106 ) ( c8ad445 ) Update peer dependencies for js-lib ( #177 ) ( d8b8c8e ) Enhancements geoname + uri: add rel attribute for security ( #207 ) ( c76029a ) Maintenance Update DSP-Api and DSP-JS-Lib ( #236 ) ( 9a8ae79 ) update dsp-js version ( #249 ) ( abca383 ) Update dsp-js-lib ( #242 ) ( 8723bcc ) Update js-lib version number ( #151 ) ( c0b47bb ) 1.0.0 RCs Breaking changes #82 Action module pipes migration #214 DSP-759 Check if a Given Date Can Be Edited / Rename ValueTypeService to ValueService #233 DSP-974 / DSP-1043 Determine from ontology if a property is read-only #228 DSP-1002 Update standoff link value #199 DSP-682 Integrate Ckeditor into Property View #137 Better data handling in search module components #78 Rename @knora/ui to @dasch-swiss/dsp-ui and kui to dsp #63 Upgrade to Angular 9 Enhancements #138 Optimise the number of cards per line #136 Build lib including assets folder #128 Add Still Image Viewer #125 Login Form Migration #122 Simple list of resources #109 Create new value for existing property #119 Add Gravsearch Generation Service #107 Migrate Advanced Search #116 Add ArkUrl copy to clipboard in resource-view #115 DSP-UI Live Reloading #105 Move the search-panel and the fulltext-search components #112 Use latest rc of dsp-js and other improvements #111 Make the sorting service more flexible #100 Use strictTemplates Compiler Option #103 Search module setup #88 Refactor how to get properties by type #73 Custom Boolean Pipe #238 DSP-1132 Advanced search limit to project #220 DSP-784 Propagate Click Event to Res Viewer Comp. #230 DSP-945-update resource viewer #213 DSP-869 add select project component #232 Add missing decorator to ValueOperationEventService #239 Use new methods for ontology info processing #227 DSP-1028 Activate still-image in resource viewer #218 DSP-904 upload form for representations #207 DSP-806 Add the attribute 'rel' to uri and geoname value component template #217 Create user service #134 Add CKeditor #208 DSP-762 Error handling and notification service #157 DSP-369 System Prop Info #192 DSP-653 Default Boolean Value #198 DSP-638 Value Deletion Comment #202 DSP-657 Handle links in XML text values #201 DSP-779 Display error messages directly and not only in console #200 DSP-777 Show message on all server errors in login component #189 DSP-693 Sort button style #172 Show label for URI Value (if set) #168 Message component timer #161 Read mode date value era and calendar #160 Emit link value when clicked on #159 Make URI values clickable #155 Experimental: Alternative approach to resource/property view UI buttons #153 Error handling: submitting duplicate values #152 List of properties: refactor and redesign #147 Delete property value #150 Action Module Confirmation Dialog Component #149 Export operator.ts #146 Add missing regex variables #139 Create New Value V2 #83 Preparing Release Candidate v1.0.0-rc.0 #67 Improve read mode appearance of value components #69 Create Value Comparison Method #57 Geoname mat-icon suffix #42 Prototyping property viewer with the value components #43 Value Component CSS and other styling #56 Simulate productive circumstances locally #34 Color value component #26 Interval Value Component #29 Boolean value component #22 Uri Value Component #23 Decimal Value Component Bug Fixes #142 FIX: DSP UI is blocked when submitting an invalid value #121 Flaky E2E Tests #118 AppInitService: Make members non static #106 FIX: display-edit dev build errors #104 FIX: sublist value component viewchild issue #102 FIX: Sort button type annotation #97 FIX: Action Module Playground & Components Missing Imports #237 DSP-1110 Bug fixes and styling improvement in resource viewer #224 CKEditor Backward Compatibility #211 DSP-885 default gravsearch query #229 DSP-1075 Bug in notification service #221 DSP-885 Fix default gravsearch query #222 DSP-768 Styling issue in resource (properties) viewer #226 DSP-924 Never Import from index.ts Internally #212 DSP-788 Fix compatibility issues with CKEditor version 4 #182 DSP-652 FIX: Boolean add button #205 DSP-674 Bug fix in search panel #194 DSP-436 Fix workflow issue #171 FIX: Delete Value UI Bug #169 Search Panel: Advanced Search Not Displayed #162 Export GND directive #77 FIX: KnoraDatePipe return values #66 BUG: User can no longer save an edited value #58 Clean up prop label Documentation #99 Update README #87 Describe concept of value components #225 Explain Demo App (Playground) #179 docs: Update CHANGELOG #144 Update CHANGELOG and READMEs #241 Update CHANGELOG and READMEs #72 Step by step guidelines in the READMEs Styling #141 Change Home Icon of OpenSeadragon Viewer #206 DSP-522 Refactor search panel style #180 DSP-636 Message Component Css #184 DSP-615 Date Value Component Polish #185 DSP-644 Date & Interval Components: Remove Parent Input Placeholder #191 DSP-623 Color Value Polish #193 DSP-651 Geoname Value Styling Dependencies #242 Update dsp-js-lib #127 Update JS-Lib Dep #236 Update DSP dependencies #219 Update dependencies #215 Update dsp-js-lib #209 Update DSP-JS-Lib #186 DSP-672 Update dependency #177 fix: Update peer dependencies for js-lib #166 Update peer-dep for dsp-js lib #151 Update dsp-js-lib to version 1.0.0-rc.6 Maintenance #143 Prerelease of v1.0.0 rc.2 #131 Migrate String Literal Input Component #135 Rename knoraApiConnection to _dspApiConnection in constructors #133 Update assets folder and file structrue #132 Migrate Stringify String Literal Pipe #123 Hide link to geonames.org in edit mode #113 Update JS-Lib Dep #110 Remove jdn-datepicker directive from action module directives #101 Refactor Sort Button #95 Migration of message component #94 Migrate sort button #93 Progress Indicator #91 Migrate action module directives #92 Update tslint #89 Refactor Truncate Pipe #86 Update package information #231 Adapt knora-api repo name #235 Update to v13.0.0-rc.23 #234 DSP-1097 - Bump JS-Lib Version and Fix Breaking Changes #210 DSP-881 Value Component Base Class Changes #216 DSP-920 Renaming default github branch to \"main\" #187 DSP-649 Hide Geometry Property #197 DSP-708 Refactor CI workflow script #195 DSP-701 Add template for PRs #183 DSP-619 Update release process #175 Fix compareObjectTypeWithValueType Method #174 Confirmation Dialog Message Subcomponent #170 Rephrase \"This source belongs to project\" in the resource viewer #154 Hide system ontologies #167 Prerelease: 1.0.0-rc.5 #165 release(prerelease): 1.0.0-rc.4 #164 dsp-property-toolbar warnings in unit tests #156 FIX: hide the add button for an XML text property #148 Prerelease 1.0.0-rc.3 #145 Update process of release notes #81 Add ngx-color-picker to lib's peer deps #76 Use @knora/api 1.0.0-rc.0 #71 cdkTextareaAutosize code cleanup #70 Remove readonly inputs #64 Add Exports #59 Add missing config files","title":"Release Notes"},{"location":"how-to-contribute/release-notes/#changelog","text":"","title":"Changelog"},{"location":"how-to-contribute/release-notes/#180-2021-08-13","text":"","title":"1.8.0 (2021-08-13)"},{"location":"how-to-contribute/release-notes/#enhancements","text":"action: new progress indicator (just for fun) ( #331 ) ( d7a1b63 ) display-edit: disable delete depending on cardinality (DSP-1814) ( #329 ) ( 933bb13 )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#175-2021-08-10","text":"","title":"1.7.5 (2021-08-10)"},{"location":"how-to-contribute/release-notes/#maintenance","text":"viewer: return label and id in multiple resource selection (DSP-1842 / DSP-1820) ( #327 ) ( 016e22a )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#174-2021-08-03","text":"","title":"1.7.4 (2021-08-03)"},{"location":"how-to-contribute/release-notes/#bug-fixes","text":"action: bug fix in linkify pipe (DSP-1837) ( #325 ) ( 13fb692 )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#173-2021-07-30","text":"","title":"1.7.3 (2021-07-30)"},{"location":"how-to-contribute/release-notes/#bug-fixes_1","text":"viewer: fix several issues in list-view (DSP-1575) ( #324 ) ( 9a76b0a )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#maintenance_1","text":"deps: bump dsp-js to latest version (DSP-1825) ( #322 ) ( 4e8be74 )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#172-2021-07-26","text":"","title":"1.7.2 (2021-07-26)"},{"location":"how-to-contribute/release-notes/#maintenance_2","text":"resource: clean up code and refactoring (DSP-1816) ( #319 ) ( 3b6b32c )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#171-2021-07-22","text":"","title":"1.7.1 (2021-07-22)"},{"location":"how-to-contribute/release-notes/#bug-fixes_2","text":"viewer: emit selected resource always (DSP-1809) ( #317 ) ( c881cb6 )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#170-2021-07-16","text":"","title":"1.7.0 (2021-07-16)"},{"location":"how-to-contribute/release-notes/#enhancements_1","text":"action: intermediate page for selected resources in comparison viewer (DSP-1765) ( #313 ) ( fa4950e ) viewer: add checkbox for every resource in list and grid view (DSP-1711) ( #311 ) ( 1e0381a ) viewer: recognise URLs in text value and convert into link (DSP-1595) ( #315 ) ( f08b50d ) viewer: split pane to compare multiple resource (DSP-1785) ( #316 ) ( b24274e )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#160-2021-06-23","text":"","title":"1.6.0 (2021-06-23)"},{"location":"how-to-contribute/release-notes/#enhancements_2","text":"viewer: improve editing of geonames (DSP-1212) ( #307 ) ( 91bb637 ) viewer: make hex code display optional for color value (DSP-1667) ( #303 ) ( 0b03781 ) viewer: resolve geoname id and show name (DSP-1212) ( #305 ) ( 18ea19b )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#maintenance_3","text":"update: update cal lib and date adapter (DSP-1758) ( #309 ) ( 020b080 )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#150-2021-06-10","text":"","title":"1.5.0 (2021-06-10)"},{"location":"how-to-contribute/release-notes/#enhancements_3","text":"action: only show era if supported by calendar (DSP-1725) ( #302 ) ( 74ceafb ) date input: create new component for date input (DSP-94) ( #298 ) ( d23e844 ) viewer: improve style of date input (DSP-1724) ( #301 ) ( 4c3d1b3 )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#140-2021-05-25","text":"","title":"1.4.0 (2021-05-25)"},{"location":"how-to-contribute/release-notes/#enhancements_4","text":"advanced search: specify linked resource (DSP-1587) ( #293 ) ( 42e3311 )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#documentation","text":"advanced search: update naming to advanced search (DSP-1651) ( #295 ) ( 7f8c7e6 )","title":"Documentation"},{"location":"how-to-contribute/release-notes/#130-2021-05-07","text":"","title":"1.3.0 (2021-05-07)"},{"location":"how-to-contribute/release-notes/#enhancements_5","text":"advanced search: try to reuse resource and property selection (DSP-1587) ( #290 ) ( 523af24 ) list-view: Create boolean flag to enable/disable the view switcher ( #294 ) ( 2053020 )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#125-2021-05-03","text":"","title":"1.2.5 (2021-05-03)"},{"location":"how-to-contribute/release-notes/#bug-fixes_3","text":"viewer: set correct rgba value (DSP-1588) ( #288 ) ( 01daed4 )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#maintenance_4","text":"viewer: export value operation events (DSP-1590) ( #291 ) ( a17b8e6 )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#124-2021-03-25","text":"","title":"1.2.4 (2021-03-25)"},{"location":"how-to-contribute/release-notes/#maintenance_5","text":"update angular: update to Angular 11 (DSP-1472) ( #286 ) ( cdc038c )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#123-2021-03-22","text":"","title":"1.2.3 (2021-03-22)"},{"location":"how-to-contribute/release-notes/#maintenance_6","text":"package.json: improve description in package.json ( #283 ) ( 7c8e738 ) update angular 10.2: update to Angular 10 ( #280 ) ( d48c6ff )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#122-2021-02-10","text":"","title":"1.2.2 (2021-02-10)"},{"location":"how-to-contribute/release-notes/#maintenance_7","text":"dependency: update dsp-js to v2.0.0 and dsp-api to v13.2.0 ( #276 ) ( d03aef7 ) dependency: update dsp-js to v2.0.1 and dsp-api to v13.3.1 ( #278 ) ( c27d5f7 )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#121-2021-02-02","text":"","title":"1.2.1 (2021-02-02)"},{"location":"how-to-contribute/release-notes/#documentation_1","text":"update the READMEs and init mkDocs (DSP-1298) ( #271 ) ( b436a31 )","title":"Documentation"},{"location":"how-to-contribute/release-notes/#maintenance_8","text":"bumps DSP-JS and DSP-API version numbers ( #275 ) ( c79e403 )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#120-2021-01-28","text":"","title":"1.2.0 (2021-01-28)"},{"location":"how-to-contribute/release-notes/#enhancements_6","text":"string-literal-input: updates input on label changes ( #269 ) ( 5659391 ) viewer: integrate file upload component in form logic (DSP-1257) ( #264 ) ( 1d208d1 )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#maintenance_9","text":"package.json: update dsp-js ( #265 ) ( 61f6079 ) update dsp-js version to 1.2.1 ( #270 ) ( 3c54c4e )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#111-2021-01-18","text":"","title":"1.1.1 (2021-01-18)"},{"location":"how-to-contribute/release-notes/#bug-fixes_4","text":"Link Value: custom validator should allow null (DSP-1237) ( #261 ) ( 01da692 )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#110-2021-01-15","text":"","title":"1.1.0 (2021-01-15)"},{"location":"how-to-contribute/release-notes/#bug-fixes_5","text":"Action Module Playground & Components Missing Imports ( #97 ) ( 03cc104 ) Boolean add button ( #182 ) ( 636616e ) Date Value Validators: Propagate valueRequiredValidator to child component (DSP-1188) ( #251 ) ( 27502f5 ) Delete Value UI Bug ( #171 ) ( c2dff4d ) display-edit dev build errors ( #106 ) ( c8ad445 ) Interval Value Validators: Propagate valueRequiredValidator to child component (DSP-1193) ( #253 ) ( 3424831 ) search: Detach bug fix ( #205 ) ( 9a5b537 ) Time Value Validators: Propagate valueRequiredValidator to child component (DSP-1218) ( #257 ) ( dd8fd80 ) Update peer dependencies for js-lib ( #177 ) ( d8b8c8e )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#enhancements_7","text":"geoname + uri: add rel attribute for security ( #207 ) ( c76029a )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#maintenance_10","text":"Clean up CHANGELOG and package.json ( #256 ) ( 4ba898b ) release 1.0.0 ( #244 ) ( 77e272a ) release 1.0.1 ( #255 ) ( e9b0f01 ) Update DSP-Api and DSP-JS-Lib ( #236 ) ( 9a8ae79 ) update dsp-js version ( #249 ) ( abca383 ) Update dsp-js-lib ( #242 ) ( 8723bcc ) Update js-lib version number ( #151 ) ( c0b47bb )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#101-2021-01-15","text":"","title":"1.0.1 (2021-01-15)"},{"location":"how-to-contribute/release-notes/#bug-fixes_6","text":"Date Value Validators: Propagate valueRequiredValidator to child component (DSP-1188) ( #251 ) ( 27502f5 ) Interval Value Validators: Propagate valueRequiredValidator to child component (DSP-1193) ( #253 ) ( 3424831 ) Time Value Validators: Propagate valueRequiredValidator to child component (DSP-1218) ( #257 ) ( dd8fd80 ) fix: Value Form Control Name (DSP-1186) ( #250 ) ( 3098bfa )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#maintenance_11","text":"Clean up CHANGELOG and package.json ( #256 ) ( 4ba898b )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#100-2020-12-18","text":"","title":"1.0.0 (2020-12-18)"},{"location":"how-to-contribute/release-notes/#bug-fixes_7","text":"search: Detach bug fix ( #205 ) ( 9a5b537 ) Action Module Playground & Components Missing Imports ( #97 ) ( 03cc104 ) Boolean add button ( #182 ) ( 636616e ) Delete Value UI Bug ( #171 ) ( c2dff4d ) display-edit dev build errors ( #106 ) ( c8ad445 ) Update peer dependencies for js-lib ( #177 ) ( d8b8c8e )","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#enhancements_8","text":"geoname + uri: add rel attribute for security ( #207 ) ( c76029a )","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#maintenance_12","text":"Update DSP-Api and DSP-JS-Lib ( #236 ) ( 9a8ae79 ) update dsp-js version ( #249 ) ( abca383 ) Update dsp-js-lib ( #242 ) ( 8723bcc ) Update js-lib version number ( #151 ) ( c0b47bb )","title":"Maintenance"},{"location":"how-to-contribute/release-notes/#100-rcs","text":"","title":"1.0.0 RCs"},{"location":"how-to-contribute/release-notes/#breaking-changes","text":"#82 Action module pipes migration #214 DSP-759 Check if a Given Date Can Be Edited / Rename ValueTypeService to ValueService #233 DSP-974 / DSP-1043 Determine from ontology if a property is read-only #228 DSP-1002 Update standoff link value #199 DSP-682 Integrate Ckeditor into Property View #137 Better data handling in search module components #78 Rename @knora/ui to @dasch-swiss/dsp-ui and kui to dsp #63 Upgrade to Angular 9","title":"Breaking changes"},{"location":"how-to-contribute/release-notes/#enhancements_9","text":"#138 Optimise the number of cards per line #136 Build lib including assets folder #128 Add Still Image Viewer #125 Login Form Migration #122 Simple list of resources #109 Create new value for existing property #119 Add Gravsearch Generation Service #107 Migrate Advanced Search #116 Add ArkUrl copy to clipboard in resource-view #115 DSP-UI Live Reloading #105 Move the search-panel and the fulltext-search components #112 Use latest rc of dsp-js and other improvements #111 Make the sorting service more flexible #100 Use strictTemplates Compiler Option #103 Search module setup #88 Refactor how to get properties by type #73 Custom Boolean Pipe #238 DSP-1132 Advanced search limit to project #220 DSP-784 Propagate Click Event to Res Viewer Comp. #230 DSP-945-update resource viewer #213 DSP-869 add select project component #232 Add missing decorator to ValueOperationEventService #239 Use new methods for ontology info processing #227 DSP-1028 Activate still-image in resource viewer #218 DSP-904 upload form for representations #207 DSP-806 Add the attribute 'rel' to uri and geoname value component template #217 Create user service #134 Add CKeditor #208 DSP-762 Error handling and notification service #157 DSP-369 System Prop Info #192 DSP-653 Default Boolean Value #198 DSP-638 Value Deletion Comment #202 DSP-657 Handle links in XML text values #201 DSP-779 Display error messages directly and not only in console #200 DSP-777 Show message on all server errors in login component #189 DSP-693 Sort button style #172 Show label for URI Value (if set) #168 Message component timer #161 Read mode date value era and calendar #160 Emit link value when clicked on #159 Make URI values clickable #155 Experimental: Alternative approach to resource/property view UI buttons #153 Error handling: submitting duplicate values #152 List of properties: refactor and redesign #147 Delete property value #150 Action Module Confirmation Dialog Component #149 Export operator.ts #146 Add missing regex variables #139 Create New Value V2 #83 Preparing Release Candidate v1.0.0-rc.0 #67 Improve read mode appearance of value components #69 Create Value Comparison Method #57 Geoname mat-icon suffix #42 Prototyping property viewer with the value components #43 Value Component CSS and other styling #56 Simulate productive circumstances locally #34 Color value component #26 Interval Value Component #29 Boolean value component #22 Uri Value Component #23 Decimal Value Component","title":"Enhancements"},{"location":"how-to-contribute/release-notes/#bug-fixes_8","text":"#142 FIX: DSP UI is blocked when submitting an invalid value #121 Flaky E2E Tests #118 AppInitService: Make members non static #106 FIX: display-edit dev build errors #104 FIX: sublist value component viewchild issue #102 FIX: Sort button type annotation #97 FIX: Action Module Playground & Components Missing Imports #237 DSP-1110 Bug fixes and styling improvement in resource viewer #224 CKEditor Backward Compatibility #211 DSP-885 default gravsearch query #229 DSP-1075 Bug in notification service #221 DSP-885 Fix default gravsearch query #222 DSP-768 Styling issue in resource (properties) viewer #226 DSP-924 Never Import from index.ts Internally #212 DSP-788 Fix compatibility issues with CKEditor version 4 #182 DSP-652 FIX: Boolean add button #205 DSP-674 Bug fix in search panel #194 DSP-436 Fix workflow issue #171 FIX: Delete Value UI Bug #169 Search Panel: Advanced Search Not Displayed #162 Export GND directive #77 FIX: KnoraDatePipe return values #66 BUG: User can no longer save an edited value #58 Clean up prop label","title":"Bug Fixes"},{"location":"how-to-contribute/release-notes/#documentation_2","text":"#99 Update README #87 Describe concept of value components #225 Explain Demo App (Playground) #179 docs: Update CHANGELOG #144 Update CHANGELOG and READMEs #241 Update CHANGELOG and READMEs #72 Step by step guidelines in the READMEs","title":"Documentation"},{"location":"how-to-contribute/release-notes/#styling","text":"#141 Change Home Icon of OpenSeadragon Viewer #206 DSP-522 Refactor search panel style #180 DSP-636 Message Component Css #184 DSP-615 Date Value Component Polish #185 DSP-644 Date & Interval Components: Remove Parent Input Placeholder #191 DSP-623 Color Value Polish #193 DSP-651 Geoname Value Styling","title":"Styling"},{"location":"how-to-contribute/release-notes/#dependencies","text":"#242 Update dsp-js-lib #127 Update JS-Lib Dep #236 Update DSP dependencies #219 Update dependencies #215 Update dsp-js-lib #209 Update DSP-JS-Lib #186 DSP-672 Update dependency #177 fix: Update peer dependencies for js-lib #166 Update peer-dep for dsp-js lib #151 Update dsp-js-lib to version 1.0.0-rc.6","title":"Dependencies"},{"location":"how-to-contribute/release-notes/#maintenance_13","text":"#143 Prerelease of v1.0.0 rc.2 #131 Migrate String Literal Input Component #135 Rename knoraApiConnection to _dspApiConnection in constructors #133 Update assets folder and file structrue #132 Migrate Stringify String Literal Pipe #123 Hide link to geonames.org in edit mode #113 Update JS-Lib Dep #110 Remove jdn-datepicker directive from action module directives #101 Refactor Sort Button #95 Migration of message component #94 Migrate sort button #93 Progress Indicator #91 Migrate action module directives #92 Update tslint #89 Refactor Truncate Pipe #86 Update package information #231 Adapt knora-api repo name #235 Update to v13.0.0-rc.23 #234 DSP-1097 - Bump JS-Lib Version and Fix Breaking Changes #210 DSP-881 Value Component Base Class Changes #216 DSP-920 Renaming default github branch to \"main\" #187 DSP-649 Hide Geometry Property #197 DSP-708 Refactor CI workflow script #195 DSP-701 Add template for PRs #183 DSP-619 Update release process #175 Fix compareObjectTypeWithValueType Method #174 Confirmation Dialog Message Subcomponent #170 Rephrase \"This source belongs to project\" in the resource viewer #154 Hide system ontologies #167 Prerelease: 1.0.0-rc.5 #165 release(prerelease): 1.0.0-rc.4 #164 dsp-property-toolbar warnings in unit tests #156 FIX: hide the add button for an XML text property #148 Prerelease 1.0.0-rc.3 #145 Update process of release notes #81 Add ngx-color-picker to lib's peer deps #76 Use @knora/api 1.0.0-rc.0 #71 cdkTextareaAutosize code cleanup #70 Remove readonly inputs #64 Add Exports #59 Add missing config files","title":"Maintenance"},{"location":"how-to-use/getting-started/","text":"Getting started Installation To use this library in your Angular app, install it from NPM: npm install @dasch-swiss/dsp-ui Dependencies This library has the following peer dependencies, which you also have to meet: @dasch-swiss/dsp-js jdnconvertiblecalendar jdnconvertiblecalendardateadapter ngx-color-picker openseadragon svg-overlay @ckeditor/ckeditor5-angular ckeditor-build Supported DSP-API Version The library is compatible with the DSP-API version defined in vars.mk : API_VERSION := v13.12.0 The DSP-UI library supports runtime configuration. The configuration is loaded when your Angular application starts. In your Angular project, create the file config.dev.json inside src/config/ : { \"apiProtocol\": \"http\", \"apiHost\": \"0.0.0.0\", \"apiPort\": 3333, \"apiPath\": \"\", \"jsonWebToken\": \"\", \"logErrors\": true, \"sipiUrl\": \"http://0.0.0.0:1024/\", \"geonameToken\": \"token\" } Likewise, create a file config.prod.json with logErrors set to false . The configuration files are needed to establish a connection to DSP-API. Create the property name in src/environments/environment.ts and set it to \"dev\": export const environment = { name: 'dev', // <-- this env. will load config.dev.json production: false }; In src/environments/environment.prod.ts : export const environment = { name: 'prod', // <-- this env. will load config.prod.json production: true }; Depending on the build options (dev or prod), the environment and configuration are chosen. The config files have to be integrated in angular.json in the \"assets\" section: \"assets\": [ \"src/favicon.ico\", \"src/assets\", \"src/config\" <-- add the config directory here ] Define the following three factory providers in your application's app.module.ts : Provide a function that calls AppInitService 's method Init and returns its return value which is a Promise . Angular waits for this Promise to be resolved. The Promise will be resolved once the configuration file has been fetched and its contents have been assigned. Get the KnoraApiConfig instance from the AppInitService instance and provide it as DspApiConfigToken . Create a KnoraApiConnection instance with the config and provide it as DspApiConnectionToken . Provide it in the main module and include the desired DSP-UI modules in the imports: @NgModule({ declarations: [ AppComponent, ProjectsComponent ], imports: [ BrowserModule, AppRoutingModule, DspCoreModule, // <-- add the dsp-ui modules here DspViewerModule ], providers: [ // 1. { provide: APP_INITIALIZER, // see https://angular.io/api/core/APP_INITIALIZER useFactory: (appInitService: AppInitService) => (): Promise<any> => { return appInitService.Init('config', environment); }, deps: [AppInitService], // depends on AppInitService multi: true }, // 2. { provide: DspApiConfigToken, // return the instance of KnoraApiConfig provided by AppInitService useFactory: (appInitService: AppInitService) => appInitService.dspApiConfig, deps: [AppInitService] // depends on AppInitService }, // 3. { provide: DspApiConnectionToken, // create and return an instance of KnoraApiConnection useFactory: (appInitService: AppInitService) => new KnoraApiConnection(appInitService.dspApiConfig), deps: [AppInitService] // depends on AppInitService } ], bootstrap: [AppComponent] }) export class AppModule { } The contents of the configuration can be accessed via AppInitService s member config . Just inject AppInitService in your service's or component's constructor. The library needs a global styling in the app to override some material design rules. If you're using Angular CLI, this is as simple as including one line in your styles.scss file: @import '@dasch-swiss/dsp-ui/src/assets/style/dsp-ui.scss'; Alternatively, you can just reference the file directly. This would look something like: <link href=\"node_modules/@dasch-swiss/dsp-ui/assets/style/dsp-ui.scss\" rel=\"stylesheet\"> Usage Add the desired modules from DSP-UI to the app.module.ts . Always import DspCoreModule . @NgModule({ declarations: [ AppComponent, ProjectsComponent ], imports: [ BrowserModule, AppRoutingModule, DspCoreModule // <-- add the dsp-ui core module here ], providers: [ ... ] // <-- add providers as mentioned in section above bootstrap: [AppComponent] }) export class AppModule { }","title":"Getting Started"},{"location":"how-to-use/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"how-to-use/getting-started/#installation","text":"To use this library in your Angular app, install it from NPM: npm install @dasch-swiss/dsp-ui","title":"Installation"},{"location":"how-to-use/getting-started/#dependencies","text":"This library has the following peer dependencies, which you also have to meet: @dasch-swiss/dsp-js jdnconvertiblecalendar jdnconvertiblecalendardateadapter ngx-color-picker openseadragon svg-overlay @ckeditor/ckeditor5-angular ckeditor-build","title":"Dependencies"},{"location":"how-to-use/getting-started/#supported-dsp-api-version","text":"The library is compatible with the DSP-API version defined in vars.mk : API_VERSION := v13.12.0 The DSP-UI library supports runtime configuration. The configuration is loaded when your Angular application starts. In your Angular project, create the file config.dev.json inside src/config/ : { \"apiProtocol\": \"http\", \"apiHost\": \"0.0.0.0\", \"apiPort\": 3333, \"apiPath\": \"\", \"jsonWebToken\": \"\", \"logErrors\": true, \"sipiUrl\": \"http://0.0.0.0:1024/\", \"geonameToken\": \"token\" } Likewise, create a file config.prod.json with logErrors set to false . The configuration files are needed to establish a connection to DSP-API. Create the property name in src/environments/environment.ts and set it to \"dev\": export const environment = { name: 'dev', // <-- this env. will load config.dev.json production: false }; In src/environments/environment.prod.ts : export const environment = { name: 'prod', // <-- this env. will load config.prod.json production: true }; Depending on the build options (dev or prod), the environment and configuration are chosen. The config files have to be integrated in angular.json in the \"assets\" section: \"assets\": [ \"src/favicon.ico\", \"src/assets\", \"src/config\" <-- add the config directory here ] Define the following three factory providers in your application's app.module.ts : Provide a function that calls AppInitService 's method Init and returns its return value which is a Promise . Angular waits for this Promise to be resolved. The Promise will be resolved once the configuration file has been fetched and its contents have been assigned. Get the KnoraApiConfig instance from the AppInitService instance and provide it as DspApiConfigToken . Create a KnoraApiConnection instance with the config and provide it as DspApiConnectionToken . Provide it in the main module and include the desired DSP-UI modules in the imports: @NgModule({ declarations: [ AppComponent, ProjectsComponent ], imports: [ BrowserModule, AppRoutingModule, DspCoreModule, // <-- add the dsp-ui modules here DspViewerModule ], providers: [ // 1. { provide: APP_INITIALIZER, // see https://angular.io/api/core/APP_INITIALIZER useFactory: (appInitService: AppInitService) => (): Promise<any> => { return appInitService.Init('config', environment); }, deps: [AppInitService], // depends on AppInitService multi: true }, // 2. { provide: DspApiConfigToken, // return the instance of KnoraApiConfig provided by AppInitService useFactory: (appInitService: AppInitService) => appInitService.dspApiConfig, deps: [AppInitService] // depends on AppInitService }, // 3. { provide: DspApiConnectionToken, // create and return an instance of KnoraApiConnection useFactory: (appInitService: AppInitService) => new KnoraApiConnection(appInitService.dspApiConfig), deps: [AppInitService] // depends on AppInitService } ], bootstrap: [AppComponent] }) export class AppModule { } The contents of the configuration can be accessed via AppInitService s member config . Just inject AppInitService in your service's or component's constructor. The library needs a global styling in the app to override some material design rules. If you're using Angular CLI, this is as simple as including one line in your styles.scss file: @import '@dasch-swiss/dsp-ui/src/assets/style/dsp-ui.scss'; Alternatively, you can just reference the file directly. This would look something like: <link href=\"node_modules/@dasch-swiss/dsp-ui/assets/style/dsp-ui.scss\" rel=\"stylesheet\">","title":"Supported DSP-API Version"},{"location":"how-to-use/getting-started/#usage","text":"Add the desired modules from DSP-UI to the app.module.ts . Always import DspCoreModule . @NgModule({ declarations: [ AppComponent, ProjectsComponent ], imports: [ BrowserModule, AppRoutingModule, DspCoreModule // <-- add the dsp-ui core module here ], providers: [ ... ] // <-- add providers as mentioned in section above bootstrap: [AppComponent] }) export class AppModule { }","title":"Usage"},{"location":"how-to-use/action/","text":"DSP-UI ACTION module DspActionModule is like a tool box containing special pipes to sort lists or to get the index key in arrays, directives for images and sorting names, but also components to display progress indicator bars or customized dialog boxes for resources, etc... Prerequisites For help getting started with a new Angular app, check the Angular CLI documentation. For existing apps, follow these steps to begin using DSP-UI ACTION. Installation DspActionModule is part of @dasch-swiss/dsp-ui, follow the installation guide . Setup Import the action module in your app.module.ts and add it to the NgModules's imports: import { AppComponent } from './app.component'; import { DspCoreModule, DspActionModule } from '@dasch-swiss/dsp-ui'; @NgModule({ declarations: [ AppComponent ], imports: [ DspCoreModule, // <- core module is required for some components and directives DspActionModule // <- add action module in the imports ], providers: [ ... ] // <-- add providers if you use the core module as mentioned in the installation guide bootstrap: [AppComponent] }) export class AppModule { } Some components need a global styling in the app to override some material styling rules. Please update your angular.json file as follow: ... \"styles\": [ \"src/styles.scss\", \"node_modules/@dasch-swiss/dsp-ui/action/assets/style/action.scss\" // <- add this line ], ... Components, Directives and Pipes This module contains various components like a progress indicator, sort button and sort-by pipe, but also directives for images (in the admin interface) and existing names.","title":"Introduction Action"},{"location":"how-to-use/action/#dsp-ui-action-module","text":"DspActionModule is like a tool box containing special pipes to sort lists or to get the index key in arrays, directives for images and sorting names, but also components to display progress indicator bars or customized dialog boxes for resources, etc...","title":"DSP-UI ACTION module"},{"location":"how-to-use/action/#prerequisites","text":"For help getting started with a new Angular app, check the Angular CLI documentation. For existing apps, follow these steps to begin using DSP-UI ACTION.","title":"Prerequisites"},{"location":"how-to-use/action/#installation","text":"DspActionModule is part of @dasch-swiss/dsp-ui, follow the installation guide .","title":"Installation"},{"location":"how-to-use/action/#setup","text":"Import the action module in your app.module.ts and add it to the NgModules's imports: import { AppComponent } from './app.component'; import { DspCoreModule, DspActionModule } from '@dasch-swiss/dsp-ui'; @NgModule({ declarations: [ AppComponent ], imports: [ DspCoreModule, // <- core module is required for some components and directives DspActionModule // <- add action module in the imports ], providers: [ ... ] // <-- add providers if you use the core module as mentioned in the installation guide bootstrap: [AppComponent] }) export class AppModule { } Some components need a global styling in the app to override some material styling rules. Please update your angular.json file as follow: ... \"styles\": [ \"src/styles.scss\", \"node_modules/@dasch-swiss/dsp-ui/action/assets/style/action.scss\" // <- add this line ], ...","title":"Setup"},{"location":"how-to-use/action/#components-directives-and-pipes","text":"This module contains various components like a progress indicator, sort button and sort-by pipe, but also directives for images (in the admin interface) and existing names.","title":"Components, Directives and Pipes"},{"location":"how-to-use/action/admin-image/","text":"AdminImage (Directive) You can use the admin image module for user avatar together with gravatar.com and for project logos. The feature of this module is the error handling: In case of a 404 error of the image source (img src) the module shows a default image-not-found image. Or a default user profile icon (type=user), or a default project icon (type=project). Parameters Name Type Description image string source of the image: - in case of user (gr)avatar it's the e-mail address, - in case of project logo it's the image url type string type of image; you can use it with: - project - user Examples User Avatar HTML file // Default user profile image <img dspAdminImage [image]=\"imgDefaultUser\" [type]=\"'user'\" /> // Avatar example: 'salsah' user <img dspAdminImage [image]=\"imgSalsahUser\" [type]=\"'user'\" /> // User image on error <img dspAdminImage [image]=\"null\" [type]=\"'user'\" /> // Default error image <img dspAdminImage [image]=\"'null'\" /> Typescript file imgDefaultUser: string = 'root@example.com'; imgSalsahUser: string = 'salsah@dasch.ch'; ### Project Logo **HTML file** // Default project image <img dspAdminImage [image]=\"imgDefaultProject\" [type]=\"'project'\" /> // Logo example: 'dasch' project <img dspAdminImage [image]=\"imgDaschProject\" [type]=\"'project'\" /> **Typescript file** imgDefaultProject: string = undefined; imgDaschProject: string = 'http://dasch.swiss/content/images/2017/11/DaSCH_Logo_RGB.png'; ![Default project logos](../../assets/images/admin-image2.png)","title":"AdminImage"},{"location":"how-to-use/action/admin-image/#adminimage-directive","text":"You can use the admin image module for user avatar together with gravatar.com and for project logos. The feature of this module is the error handling: In case of a 404 error of the image source (img src) the module shows a default image-not-found image. Or a default user profile icon (type=user), or a default project icon (type=project).","title":"AdminImage (Directive)"},{"location":"how-to-use/action/admin-image/#parameters","text":"Name Type Description image string source of the image: - in case of user (gr)avatar it's the e-mail address, - in case of project logo it's the image url type string type of image; you can use it with: - project - user","title":"Parameters"},{"location":"how-to-use/action/admin-image/#examples","text":"","title":"Examples"},{"location":"how-to-use/action/admin-image/#user-avatar","text":"HTML file // Default user profile image <img dspAdminImage [image]=\"imgDefaultUser\" [type]=\"'user'\" /> // Avatar example: 'salsah' user <img dspAdminImage [image]=\"imgSalsahUser\" [type]=\"'user'\" /> // User image on error <img dspAdminImage [image]=\"null\" [type]=\"'user'\" /> // Default error image <img dspAdminImage [image]=\"'null'\" /> Typescript file imgDefaultUser: string = 'root@example.com'; imgSalsahUser: string = 'salsah@dasch.ch'; ### Project Logo **HTML file** // Default project image <img dspAdminImage [image]=\"imgDefaultProject\" [type]=\"'project'\" /> // Logo example: 'dasch' project <img dspAdminImage [image]=\"imgDaschProject\" [type]=\"'project'\" /> **Typescript file** imgDefaultProject: string = undefined; imgDaschProject: string = 'http://dasch.swiss/content/images/2017/11/DaSCH_Logo_RGB.png'; ![Default project logos](../../assets/images/admin-image2.png)","title":"User Avatar"},{"location":"how-to-use/action/existing-name/","text":"ExistingName (Directive) With the ExistingNameDirective, we can prevent the usage of a name which should be unique but already exists. e.g. It can be used to get a list of all project shortnames which can then be used as a list of existing names when checking the validity of a new project shortname. Alternatively, you can also use this as a blacklist for words you don't want the user to be able to enter. Methods existingNameValidator() Validation of existing name value. String method (only one value); Use it in a \"formbuilder\" group as a validator property. Parameters Name Type Description valRegexp RegExp Only one regular expression value Returns ValidatorFn existingNamesValidator() Validation of existing name values. Array method (list of values) Use it in a \"formbuilder\" group as a validator property. Parameters Name Type Description valArrayRegexp RegExp List of regular expression values Returns ValidatorFn Examples Existing Name Validator The following names already exists Try to use one of them in the form above and see what happens Max Peter Paul John HTML file <form [formGroup]=\"form\" class=\"center card\"> <mat-form-field> <input matInput [formControl]=\"form.controls['name']\" [placeholder]=\"'Name (should be unique)'\"> <mat-hint *ngIf=\"formErrors.name\"> {{formErrors.name}} </mat-hint> </mat-form-field> <button mat-button color=\"primary\" [disabled]=\"!form.valid\"> Submit </button> </form> Typescript file dataMock: string[] = [ 'Max', 'Peter', 'Paul', 'John' ]; // list of existing names existingNames: [RegExp] = [ new RegExp('user') ]; // define your form group form: FormGroup; // error handling on the defined fields e.g. name formErrors = { 'name': '' }; // error message on the defined fields in formErrors validationMessages = { 'name': { 'required': 'A name is required', 'existingName': 'This name exists already.' } }; constructor(private _formBuilder: FormBuilder) { } ngOnInit() { // create a list of names, which already exists for (const user of this.dataMock) { this.existingNames.push( new RegExp('(?:^|\\W)' + user.toLowerCase() + '(?:$|\\W)') ); } // build form this.form = this._formBuilder.group({ 'name': new FormControl({ value: '', disabled: false }, [ Validators.required, existingNamesValidator(this.existingNames) ]) }); // detect changes in the form this.form.valueChanges.subscribe( data => this.onValueChanged(data) ); this.onValueChanged(); } onValueChanged(data?: any) { if (!this.form) { return; } // check if the form is valid Object.keys(this.formErrors).map(field => { this.formErrors[field] = ''; const control = this.form.get(field); if (control && control.dirty && !control.valid) { const messages = this.validationMessages[field]; Object.keys(control.errors).map(key => { this.formErrors[field] += messages[key] + ' '; }); } }); }","title":"ExistingName"},{"location":"how-to-use/action/existing-name/#existingname-directive","text":"With the ExistingNameDirective, we can prevent the usage of a name which should be unique but already exists. e.g. It can be used to get a list of all project shortnames which can then be used as a list of existing names when checking the validity of a new project shortname. Alternatively, you can also use this as a blacklist for words you don't want the user to be able to enter.","title":"ExistingName (Directive)"},{"location":"how-to-use/action/existing-name/#methods","text":"","title":"Methods"},{"location":"how-to-use/action/existing-name/#existingnamevalidator","text":"Validation of existing name value. String method (only one value); Use it in a \"formbuilder\" group as a validator property. Parameters Name Type Description valRegexp RegExp Only one regular expression value Returns ValidatorFn","title":"existingNameValidator()"},{"location":"how-to-use/action/existing-name/#existingnamesvalidator","text":"Validation of existing name values. Array method (list of values) Use it in a \"formbuilder\" group as a validator property. Parameters Name Type Description valArrayRegexp RegExp List of regular expression values Returns ValidatorFn","title":"existingNamesValidator()"},{"location":"how-to-use/action/existing-name/#examples","text":"","title":"Examples"},{"location":"how-to-use/action/existing-name/#existing-name-validator","text":"The following names already exists Try to use one of them in the form above and see what happens Max Peter Paul John HTML file <form [formGroup]=\"form\" class=\"center card\"> <mat-form-field> <input matInput [formControl]=\"form.controls['name']\" [placeholder]=\"'Name (should be unique)'\"> <mat-hint *ngIf=\"formErrors.name\"> {{formErrors.name}} </mat-hint> </mat-form-field> <button mat-button color=\"primary\" [disabled]=\"!form.valid\"> Submit </button> </form> Typescript file dataMock: string[] = [ 'Max', 'Peter', 'Paul', 'John' ]; // list of existing names existingNames: [RegExp] = [ new RegExp('user') ]; // define your form group form: FormGroup; // error handling on the defined fields e.g. name formErrors = { 'name': '' }; // error message on the defined fields in formErrors validationMessages = { 'name': { 'required': 'A name is required', 'existingName': 'This name exists already.' } }; constructor(private _formBuilder: FormBuilder) { } ngOnInit() { // create a list of names, which already exists for (const user of this.dataMock) { this.existingNames.push( new RegExp('(?:^|\\W)' + user.toLowerCase() + '(?:$|\\W)') ); } // build form this.form = this._formBuilder.group({ 'name': new FormControl({ value: '', disabled: false }, [ Validators.required, existingNamesValidator(this.existingNames) ]) }); // detect changes in the form this.form.valueChanges.subscribe( data => this.onValueChanged(data) ); this.onValueChanged(); } onValueChanged(data?: any) { if (!this.form) { return; } // check if the form is valid Object.keys(this.formErrors).map(field => { this.formErrors[field] = ''; const control = this.form.get(field); if (control && control.dirty && !control.valid) { const messages = this.validationMessages[field]; Object.keys(control.errors).map(key => { this.formErrors[field] += messages[key] + ' '; }); } }); }","title":"Existing Name Validator"},{"location":"how-to-use/action/key/","text":"Key (Pipe) This pipe can be used for \"for loops\", in the case of an array with non-numeric indexes. It returns the key and the value(s). In the example below the {{item.key}} contains the index value and the {{item.value}} contains the value(s). When the value is an object with name and label, you get them with {{item.value.name}} and {{item.value.label}} . Examples HTML file <ul> <li *ngFor=\"let item of array | dspKey\"> {{item.key}}: {{item.value}} </li> </ul> Typescript file array = []; this.array['index-1'] = 'Value in index 1'; this.array['index-2'] = 'Value in index 2'; this.array['index-3'] = 'Value in index 3';","title":"Key"},{"location":"how-to-use/action/key/#key-pipe","text":"This pipe can be used for \"for loops\", in the case of an array with non-numeric indexes. It returns the key and the value(s). In the example below the {{item.key}} contains the index value and the {{item.value}} contains the value(s). When the value is an object with name and label, you get them with {{item.value.name}} and {{item.value.label}} .","title":"Key (Pipe)"},{"location":"how-to-use/action/key/#examples","text":"","title":"Examples"},{"location":"how-to-use/action/key/#html-file","text":"<ul> <li *ngFor=\"let item of array | dspKey\"> {{item.key}}: {{item.value}} </li> </ul>","title":"HTML file"},{"location":"how-to-use/action/key/#typescript-file","text":"array = []; this.array['index-1'] = 'Value in index 1'; this.array['index-2'] = 'Value in index 2'; this.array['index-3'] = 'Value in index 3';","title":"Typescript file"},{"location":"how-to-use/action/message/","text":"Message (Component) - DEPRECATED Message component to handle notes, warning and error messages. If you set the paramater [short]=\"true\" , it shows a smaller message. It can be used to give feedbacks in a form e.g. update process: show success or error message. Parameters Message type: DspMessageData or ApiServiceError Name Type Description message DspMessageData, ApiServiceError This type needs at least a status number (0-511). In this case, or if type is ApiServiceError, it takes the default status messages from the list of HTTP status codes (https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) **Show short message only: it can be used in a form to show if a post was successfull or not.** Name | Type | Description --- | --- | --- short (optional) | boolean | **Show medium message: a message box without footnotes or links.** Name | Type | Description --- | --- | --- medium (optional) | boolean | ## Examples ### Success and error message, short version (= small size) #### HTML file <dsp-message [message]=\"shortMessage\" [short]=\"true\"></dsp-message> <dsp-message [message]=\"errorMessage\" [short]=\"true\"></dsp-message> #### Typescript file // short message example shortMessage: DspMessageData = { status: 200, statusMsg: 'Success', statusText: 'You just update the user profile.', type: 'Note', footnote: 'Close it' }; // error message example errorMessage: ApiServiceError = { status: 403, errorInfo: 'Http failure response for http://0.0.0.0:3333/admin/projects/shortcode/001/members: 400 Bad Request', statusText: 'Bad Request', url: 'http://0.0.0.0:3333/admin/projects/shortcode/001/members' }; ![Message in short version](../../assets/images/message-short.png) ### Error message, default size #### HTML file <dsp-message [message]=\"errorMessage\"></dsp-message> #### Typescript file // error message example errorMessage: ApiServiceError = { status: 403, errorInfo: 'Http failure response for http://0.0.0.0:3333/admin/projects/shortcode/001/members: 400 Bad Request', statusText: 'Bad Request', url: 'http://0.0.0.0:3333/admin/projects/shortcode/001/members' }; ![Error message in default size version](../../assets/images/message-error.png)","title":"Message"},{"location":"how-to-use/action/message/#message-component-deprecated","text":"Message component to handle notes, warning and error messages. If you set the paramater [short]=\"true\" , it shows a smaller message. It can be used to give feedbacks in a form e.g. update process: show success or error message.","title":"Message (Component) - DEPRECATED"},{"location":"how-to-use/action/message/#parameters","text":"","title":"Parameters"},{"location":"how-to-use/action/message/#message-type-dspmessagedata-or-apiserviceerror","text":"Name Type Description message DspMessageData, ApiServiceError This type needs at least a status number (0-511). In this case, or if type is ApiServiceError, it takes the default status messages from the list of HTTP status codes (https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) **Show short message only: it can be used in a form to show if a post was successfull or not.** Name | Type | Description --- | --- | --- short (optional) | boolean | **Show medium message: a message box without footnotes or links.** Name | Type | Description --- | --- | --- medium (optional) | boolean | ## Examples ### Success and error message, short version (= small size) #### HTML file <dsp-message [message]=\"shortMessage\" [short]=\"true\"></dsp-message> <dsp-message [message]=\"errorMessage\" [short]=\"true\"></dsp-message> #### Typescript file // short message example shortMessage: DspMessageData = { status: 200, statusMsg: 'Success', statusText: 'You just update the user profile.', type: 'Note', footnote: 'Close it' }; // error message example errorMessage: ApiServiceError = { status: 403, errorInfo: 'Http failure response for http://0.0.0.0:3333/admin/projects/shortcode/001/members: 400 Bad Request', statusText: 'Bad Request', url: 'http://0.0.0.0:3333/admin/projects/shortcode/001/members' }; ![Message in short version](../../assets/images/message-short.png) ### Error message, default size #### HTML file <dsp-message [message]=\"errorMessage\"></dsp-message> #### Typescript file // error message example errorMessage: ApiServiceError = { status: 403, errorInfo: 'Http failure response for http://0.0.0.0:3333/admin/projects/shortcode/001/members: 400 Bad Request', statusText: 'Bad Request', url: 'http://0.0.0.0:3333/admin/projects/shortcode/001/members' }; ![Error message in default size version](../../assets/images/message-error.png)","title":"Message type: DspMessageData or ApiServiceError"},{"location":"how-to-use/action/progress-indicator/","text":"Progress Indicator (Component) The progress indicator can be used to show the status of loading something. This can be the simple loader or in case of submitting data it can show the status (not ready, loading, done or error). Parameters Name Type Description status (optional) number [status] is a number and can be used when submitting form data: - not ready: -1 - loading: 0 - done: 1 - error: 400 color=primary (optional) string Parameter to customize the appearance of the loader. Hexadecimal color value e.g. #00ff00 or similar color values 'red', 'green' etc. Examples You can use the progress indicator in two ways: Classic Loader HTML file <dsp-progress-indicator></dsp-progress-indicator> ### Submit-form-data loader e.g. as a list style type while submitting form data ![Submit form data loader](../../assets/images/submit-form-data-loader.png) Angular Material Icons is required. You have to import the style file into your app and add the following line in your main styling file: `@import url('https://fonts.googleapis.com/icon?family=Material+Icons');` We recommend to host the Material Icons font in your app e.g. by using the [Material Icons package](https://www.npmjs.com/package/material-icons). ### Dynamic example of Submit-form-data loader ![Loader before submit stage](../../assets/images/loader-before-submit-status.png) ![Loader submitting stage](../../assets/images/loader-submitting-status.png) ![Loader after submit stage](../../assets/images/loader-after-submit-status.png)","title":"Progress indicator"},{"location":"how-to-use/action/progress-indicator/#progress-indicator-component","text":"The progress indicator can be used to show the status of loading something. This can be the simple loader or in case of submitting data it can show the status (not ready, loading, done or error).","title":"Progress Indicator (Component)"},{"location":"how-to-use/action/progress-indicator/#parameters","text":"Name Type Description status (optional) number [status] is a number and can be used when submitting form data: - not ready: -1 - loading: 0 - done: 1 - error: 400 color=primary (optional) string Parameter to customize the appearance of the loader. Hexadecimal color value e.g. #00ff00 or similar color values 'red', 'green' etc.","title":"Parameters"},{"location":"how-to-use/action/progress-indicator/#examples","text":"You can use the progress indicator in two ways:","title":"Examples"},{"location":"how-to-use/action/progress-indicator/#classic-loader","text":"","title":"Classic Loader"},{"location":"how-to-use/action/progress-indicator/#html-file","text":"<dsp-progress-indicator></dsp-progress-indicator> ### Submit-form-data loader e.g. as a list style type while submitting form data ![Submit form data loader](../../assets/images/submit-form-data-loader.png) Angular Material Icons is required. You have to import the style file into your app and add the following line in your main styling file: `@import url('https://fonts.googleapis.com/icon?family=Material+Icons');` We recommend to host the Material Icons font in your app e.g. by using the [Material Icons package](https://www.npmjs.com/package/material-icons). ### Dynamic example of Submit-form-data loader ![Loader before submit stage](../../assets/images/loader-before-submit-status.png) ![Loader submitting stage](../../assets/images/loader-submitting-status.png) ![Loader after submit stage](../../assets/images/loader-after-submit-status.png)","title":"HTML file"},{"location":"how-to-use/action/sort-button/","text":"SortButton (Component) A component with a list of properties to sort a list by. It can be used together with the DspSortBy pipe. Parameters {string} sortKeyChange EventEmitter when a user selected a sort property; This is the selected key. Name Type Description sortProps Array An array of SortProp objects for the selection menu: SortProp: { key: string, label: string } position='left' (optional) string Optional position of the sort menu: right or left icon='sort' (optional) string Default icon is \"sort\" from material design. But you can replace it with another one e.g. sort_by_alpha sortKey string Set and get (two-way data binding) of current sort key Example - Simple Example HTML file <dsp-sort-button [sortProps]=\"sortProps\" [(sortKey)]=\"sortKey\" [position]=\"'right'\"></dsp-sort-button> <ul> <li *ngFor=\"let item of list | dspSortBy: sortKey\"> <span [class.active]=\"sortKey === 'prename'\">{{item.prename}} </span> <span [class.active]=\"sortKey === 'lastname'\">{{item.lastname}} </span> by <span [class.active]=\"sortKey === 'creator'\">{{item.creator}}</span> </li> </ul> Typescript file sortProps: any = [ { key: 'prename', label: 'Prename' }, { key: 'lastname', label: 'Last name' }, { key: 'creator', label: 'Creator' } ]; sortKey: string = 'creator'; list = [ { prename: 'Gaston', lastname: 'Lagaffe', creator: 'Andr\u00e9 Franquin' }, { prename: 'Mickey', lastname: 'Mouse', creator: 'Walt Disney' }, { prename: 'Donald', lastname: 'Duck', creator: 'Walt Disney' }, { prename: 'Charlie', lastname: 'Brown', creator: 'Charles M. Schulz' } ]; Optional It's possible to set the position of the sort button to the right or left side with the property [position] .","title":"SortButton"},{"location":"how-to-use/action/sort-button/#sortbutton-component","text":"A component with a list of properties to sort a list by. It can be used together with the DspSortBy pipe.","title":"SortButton (Component)"},{"location":"how-to-use/action/sort-button/#parameters","text":"{string} sortKeyChange EventEmitter when a user selected a sort property; This is the selected key. Name Type Description sortProps Array An array of SortProp objects for the selection menu: SortProp: { key: string, label: string } position='left' (optional) string Optional position of the sort menu: right or left icon='sort' (optional) string Default icon is \"sort\" from material design. But you can replace it with another one e.g. sort_by_alpha sortKey string Set and get (two-way data binding) of current sort key","title":"Parameters"},{"location":"how-to-use/action/sort-button/#example-simple-example","text":"","title":"Example - Simple Example"},{"location":"how-to-use/action/sort-button/#html-file","text":"<dsp-sort-button [sortProps]=\"sortProps\" [(sortKey)]=\"sortKey\" [position]=\"'right'\"></dsp-sort-button> <ul> <li *ngFor=\"let item of list | dspSortBy: sortKey\"> <span [class.active]=\"sortKey === 'prename'\">{{item.prename}} </span> <span [class.active]=\"sortKey === 'lastname'\">{{item.lastname}} </span> by <span [class.active]=\"sortKey === 'creator'\">{{item.creator}}</span> </li> </ul>","title":"HTML file"},{"location":"how-to-use/action/sort-button/#typescript-file","text":"sortProps: any = [ { key: 'prename', label: 'Prename' }, { key: 'lastname', label: 'Last name' }, { key: 'creator', label: 'Creator' } ]; sortKey: string = 'creator'; list = [ { prename: 'Gaston', lastname: 'Lagaffe', creator: 'Andr\u00e9 Franquin' }, { prename: 'Mickey', lastname: 'Mouse', creator: 'Walt Disney' }, { prename: 'Donald', lastname: 'Duck', creator: 'Walt Disney' }, { prename: 'Charlie', lastname: 'Brown', creator: 'Charles M. Schulz' } ];","title":"Typescript file"},{"location":"how-to-use/action/sort-button/#optional","text":"It's possible to set the position of the sort button to the right or left side with the property [position] .","title":"Optional"},{"location":"how-to-use/action/stringify-string-literal/","text":"StringifyStringLiteral (Pipe) This pipe stringifies an array of StringLiterals. With the parameter all , the pipe concats all values and appends the corresponding language in brackets. Otherwise the pipe displays the value corresponding to the default language which comes from the user profile (if a user is logged-in) or from the browser. With the predefined language the pipe checks if a value exists in the array, otherwise it shows the first value. Example - StringifyStringLiteral Pipe HTML file <strong>Show all values</strong> <p>{{labels | dspStringifyStringLiteral:'all'}}</p> <strong>Show only one value</strong> <p>{{labels | dspStringifyStringLiteral}}</p> Typescript file labels: StringLiteral[] = '[{\"value\":\"Welt\",\"language\":\"de\"},{\"value\":\"World\",\"language\":\"en\"},{\"value\":\"Monde\",\"language\":\"fr\"},{\"value\":\"Mondo\",\"language\":\"it\"}]'; Show all values Welt (de) / World (en) / Monde (fr) / Mondo (it) Show only one value World","title":"StringifyStringLiteral"},{"location":"how-to-use/action/stringify-string-literal/#stringifystringliteral-pipe","text":"This pipe stringifies an array of StringLiterals. With the parameter all , the pipe concats all values and appends the corresponding language in brackets. Otherwise the pipe displays the value corresponding to the default language which comes from the user profile (if a user is logged-in) or from the browser. With the predefined language the pipe checks if a value exists in the array, otherwise it shows the first value.","title":"StringifyStringLiteral (Pipe)"},{"location":"how-to-use/action/stringify-string-literal/#example-stringifystringliteral-pipe","text":"","title":"Example - StringifyStringLiteral Pipe"},{"location":"how-to-use/action/stringify-string-literal/#html-file","text":"<strong>Show all values</strong> <p>{{labels | dspStringifyStringLiteral:'all'}}</p> <strong>Show only one value</strong> <p>{{labels | dspStringifyStringLiteral}}</p>","title":"HTML file"},{"location":"how-to-use/action/stringify-string-literal/#typescript-file","text":"labels: StringLiteral[] = '[{\"value\":\"Welt\",\"language\":\"de\"},{\"value\":\"World\",\"language\":\"en\"},{\"value\":\"Monde\",\"language\":\"fr\"},{\"value\":\"Mondo\",\"language\":\"it\"}]'; Show all values Welt (de) / World (en) / Monde (fr) / Mondo (it) Show only one value World","title":"Typescript file"},{"location":"how-to-use/action/truncate/","text":"Truncate (Pipe) This pipe can be used to shorten long text by a defined length. In markup: {{ str | dspTruncate:[24] }} or {{ str | dspTruncate:[24, '...'] }} The first parameter defines the length where to truncate the string. Second optional parameter defines the characters to append to the shortened string. Default is ... . The advantage of this pipe over the default Angular slice pipe is the simplicity of adding additional characters at the end of the shortened string. The same construct with Angular slice pipe looks as follow: {{ (str.length>24)? (str | slice:0:24)+'...':(str) }} . Example - Truncate Pipe HTML file <p>{{longText | dspTruncate:[24]}}</p> Typescript file longText: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vel pharetra vel turpis nunc eget lorem dolor. Euismod lacinia at quis risus sed vulputate. Ultrices gravida dictum fusce ut placerat orci nulla pellentesque. Tortor consequat id porta nibh venenatis cras. Turpis tincidunt id aliquet risus feugiat in ante metus. Dictum fusce ut placerat orci nulla pellentesque dignissim enim sit. Mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan. Mauris sit amet massa vitae tortor condimentum lacinia quis vel. Dictum sit amet justo donec enim diam vulputate. Dignissim convallis aenean et tortor. Ut tellus elementum sagittis vitae et. Pretium viverra suspendisse potenti nullam ac tortor vitae purus faucibus. Eget mauris pharetra et ultrices neque ornare aenean. Diam in arcu cursus euismod. Odio ut enim blandit volutpat maecenas volutpat. Suspendisse interdum consectetur libero id faucibus nisl tincidunt eget. Risus commodo viverra maecenas accumsan.'; Output: Lorem ipsum dolor sit am...","title":"Truncate"},{"location":"how-to-use/action/truncate/#truncate-pipe","text":"This pipe can be used to shorten long text by a defined length. In markup: {{ str | dspTruncate:[24] }} or {{ str | dspTruncate:[24, '...'] }} The first parameter defines the length where to truncate the string. Second optional parameter defines the characters to append to the shortened string. Default is ... . The advantage of this pipe over the default Angular slice pipe is the simplicity of adding additional characters at the end of the shortened string. The same construct with Angular slice pipe looks as follow: {{ (str.length>24)? (str | slice:0:24)+'...':(str) }} .","title":"Truncate (Pipe)"},{"location":"how-to-use/action/truncate/#example-truncate-pipe","text":"","title":"Example - Truncate Pipe"},{"location":"how-to-use/action/truncate/#html-file","text":"<p>{{longText | dspTruncate:[24]}}</p>","title":"HTML file"},{"location":"how-to-use/action/truncate/#typescript-file","text":"longText: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vel pharetra vel turpis nunc eget lorem dolor. Euismod lacinia at quis risus sed vulputate. Ultrices gravida dictum fusce ut placerat orci nulla pellentesque. Tortor consequat id porta nibh venenatis cras. Turpis tincidunt id aliquet risus feugiat in ante metus. Dictum fusce ut placerat orci nulla pellentesque dignissim enim sit. Mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan. Mauris sit amet massa vitae tortor condimentum lacinia quis vel. Dictum sit amet justo donec enim diam vulputate. Dignissim convallis aenean et tortor. Ut tellus elementum sagittis vitae et. Pretium viverra suspendisse potenti nullam ac tortor vitae purus faucibus. Eget mauris pharetra et ultrices neque ornare aenean. Diam in arcu cursus euismod. Odio ut enim blandit volutpat maecenas volutpat. Suspendisse interdum consectetur libero id faucibus nisl tincidunt eget. Risus commodo viverra maecenas accumsan.'; Output: Lorem ipsum dolor sit am...","title":"Typescript file"},{"location":"how-to-use/core/","text":"DSP-UI CORE module DspCoreModule is a configuration handler for @dasch-swiss/dsp-js which offers all the services to make DSP-API requests . Prerequisites For help getting started with a new Angular app, check out the Angular CLI . For existing apps, follow these steps to begin using DSP-UI CORE. Installation DspCoreModule is part of @dasch-swiss/dsp-ui, follow the installation guide . Usage The following ProjectsComponent example shows how to implement the two libraries to get all projects from DSP-API: import { Component, Inject, OnInit } from '@angular/core'; import { DspApiConnectionToken } from '@dasch-swiss/dsp-ui'; import { ApiResponseData, ApiResponseError, KnoraApiConnection, ProjectsResponse, ReadProject } from '@dasch-swiss/dsp-js'; @Component({ selector: 'app-projects', template: `<ul><li *ngFor=\"let p of projects\">{{p.longname}} (<strong>{{p.shortname}}</strong> | {{p.shortcode}})</li></ul>` }) export class ProjectsComponent implements OnInit { projects: ReadProject[]; constructor( @Inject(DspApiConnectionToken) private dspApiConnection: KnoraApiConnection ) { } ngOnInit() { this.getProjects(); } getProjects() { this.dspApiConnection.admin.projectsEndpoint.getProjects().subscribe( (response: ApiResponseData<ProjectsResponse>) => { this.projects = response.body.projects; }, (error: ApiResponseError) => { console.error(error); } ); } }","title":"Introduction Core"},{"location":"how-to-use/core/#dsp-ui-core-module","text":"DspCoreModule is a configuration handler for @dasch-swiss/dsp-js which offers all the services to make DSP-API requests .","title":"DSP-UI CORE module"},{"location":"how-to-use/core/#prerequisites","text":"For help getting started with a new Angular app, check out the Angular CLI . For existing apps, follow these steps to begin using DSP-UI CORE.","title":"Prerequisites"},{"location":"how-to-use/core/#installation","text":"DspCoreModule is part of @dasch-swiss/dsp-ui, follow the installation guide .","title":"Installation"},{"location":"how-to-use/core/#usage","text":"The following ProjectsComponent example shows how to implement the two libraries to get all projects from DSP-API: import { Component, Inject, OnInit } from '@angular/core'; import { DspApiConnectionToken } from '@dasch-swiss/dsp-ui'; import { ApiResponseData, ApiResponseError, KnoraApiConnection, ProjectsResponse, ReadProject } from '@dasch-swiss/dsp-js'; @Component({ selector: 'app-projects', template: `<ul><li *ngFor=\"let p of projects\">{{p.longname}} (<strong>{{p.shortname}}</strong> | {{p.shortcode}})</li></ul>` }) export class ProjectsComponent implements OnInit { projects: ReadProject[]; constructor( @Inject(DspApiConnectionToken) private dspApiConnection: KnoraApiConnection ) { } ngOnInit() { this.getProjects(); } getProjects() { this.dspApiConnection.admin.projectsEndpoint.getProjects().subscribe( (response: ApiResponseData<ProjectsResponse>) => { this.projects = response.body.projects; }, (error: ApiResponseError) => { console.error(error); } ); } }","title":"Usage"},{"location":"how-to-use/search/","text":"DSP-UI SEARCH module DspSearchModule allows to make simple searches or advanced searches in DSP-API. In advanced search, resource class and its properties related to one specific ontology are selected to create your query. It is also possible to write Gravsearch queries to target specific data with the expert search form. Prerequisites For help getting started with a new Angular app, check out the Angular CLI . For existing apps, follow these steps to begin using DSP-UI SEARCH. Installation DspSearchModule is part of @dasch-swiss/dsp-ui, follow the installation guide . Components This module contains various components to search. The main component is the dsp-search-panel, which contains the dsp-fulltext-search, dsp-advanced-search and dsp-expert-search. All of them can be used individually or in combination in dsp-search-panel. Search panel Fully customizable panel. You can set the following parameters in dsp-search-panel: route: string; url-route for search results filterbyproject: string; project iri to limit search results by project projectfilter: boolean; selection of all projects to filter by advanced: boolean; additional menu with advanced search expert: boolean; additional menu with expert search / gravsearch \"editor\" If everything is set to false or undefined the search-panel is a simple full-text search. Read more Full-text search (Deprecated) <dsp-fulltext-search [route]=\"/search-results\"></dsp-fulltext-search> The parameter route defines the route where the search-results-component of the app is defined. We suggest to define a route for the search-results in the app.routing path: 'search', component: SearchComponent, // --> Component with the search panel children: [ { path: ':mode/:q/:project', component: SearchResultsComponent // --> search results, in case of paramter filterByProject and/or projectFilter }, { path: ':mode/:q', component: SearchResultsComponent } ] Advanced search Generic search filter tool to limit search results to ontology and resource class and / or properties. If you want to use this search, you have to add the following css style to your main app stylesheet to style the date picker properly. .mat-datepicker-content { .mat-calendar { height: auto !important; } } Expert search Expert search is a textarea input field in which you can create Gravsearch queries. The expert search can be more powerful than the advanced search, but requires knowing how to use the query language Gravsearch (based on SparQL and developed by the DaSCH team). With Gravsearch, expert users can build searches by combining text-related criteria with any other criteria. Check the Gravsearch learning guide on DSP-API documentation. Setup Import the search module in your app.module.ts and add it to the NgModules's imports: import { AppComponent } from './app.component'; import { DspCoreModule, DspSearchModule } from '@dasch-swiss/dsp-ui'; @NgModule({ declarations: [ AppComponent ], imports: [ DspCoreModule, // <- core module is required for some components and directives DspSearchModule // <- add search module in the imports ], providers: [ ... ] // <-- add providers as mentioned in the installation guide bootstrap: [AppComponent] }) export class AppModule { } The search components need a global styling in the app to override some material styling rules. Please update your angular.json file as follow: ... \"styles\": [ \"src/styles.scss\", \"node_modules/@dasch-swiss/dsp-ui/search/assets/style/search.scss\" // <- add this line ], ...","title":"Introduction Search"},{"location":"how-to-use/search/#dsp-ui-search-module","text":"DspSearchModule allows to make simple searches or advanced searches in DSP-API. In advanced search, resource class and its properties related to one specific ontology are selected to create your query. It is also possible to write Gravsearch queries to target specific data with the expert search form.","title":"DSP-UI SEARCH module"},{"location":"how-to-use/search/#prerequisites","text":"For help getting started with a new Angular app, check out the Angular CLI . For existing apps, follow these steps to begin using DSP-UI SEARCH.","title":"Prerequisites"},{"location":"how-to-use/search/#installation","text":"DspSearchModule is part of @dasch-swiss/dsp-ui, follow the installation guide .","title":"Installation"},{"location":"how-to-use/search/#components","text":"This module contains various components to search. The main component is the dsp-search-panel, which contains the dsp-fulltext-search, dsp-advanced-search and dsp-expert-search. All of them can be used individually or in combination in dsp-search-panel.","title":"Components"},{"location":"how-to-use/search/#search-panel","text":"Fully customizable panel. You can set the following parameters in dsp-search-panel: route: string; url-route for search results filterbyproject: string; project iri to limit search results by project projectfilter: boolean; selection of all projects to filter by advanced: boolean; additional menu with advanced search expert: boolean; additional menu with expert search / gravsearch \"editor\" If everything is set to false or undefined the search-panel is a simple full-text search. Read more","title":"Search panel"},{"location":"how-to-use/search/#full-text-search-deprecated","text":"<dsp-fulltext-search [route]=\"/search-results\"></dsp-fulltext-search> The parameter route defines the route where the search-results-component of the app is defined. We suggest to define a route for the search-results in the app.routing path: 'search', component: SearchComponent, // --> Component with the search panel children: [ { path: ':mode/:q/:project', component: SearchResultsComponent // --> search results, in case of paramter filterByProject and/or projectFilter }, { path: ':mode/:q', component: SearchResultsComponent } ]","title":"Full-text search (Deprecated)"},{"location":"how-to-use/search/#advanced-search","text":"Generic search filter tool to limit search results to ontology and resource class and / or properties. If you want to use this search, you have to add the following css style to your main app stylesheet to style the date picker properly. .mat-datepicker-content { .mat-calendar { height: auto !important; } }","title":"Advanced search"},{"location":"how-to-use/search/#expert-search","text":"Expert search is a textarea input field in which you can create Gravsearch queries. The expert search can be more powerful than the advanced search, but requires knowing how to use the query language Gravsearch (based on SparQL and developed by the DaSCH team). With Gravsearch, expert users can build searches by combining text-related criteria with any other criteria. Check the Gravsearch learning guide on DSP-API documentation.","title":"Expert search"},{"location":"how-to-use/search/#setup","text":"Import the search module in your app.module.ts and add it to the NgModules's imports: import { AppComponent } from './app.component'; import { DspCoreModule, DspSearchModule } from '@dasch-swiss/dsp-ui'; @NgModule({ declarations: [ AppComponent ], imports: [ DspCoreModule, // <- core module is required for some components and directives DspSearchModule // <- add search module in the imports ], providers: [ ... ] // <-- add providers as mentioned in the installation guide bootstrap: [AppComponent] }) export class AppModule { } The search components need a global styling in the app to override some material styling rules. Please update your angular.json file as follow: ... \"styles\": [ \"src/styles.scss\", \"node_modules/@dasch-swiss/dsp-ui/search/assets/style/search.scss\" // <- add this line ], ...","title":"Setup"},{"location":"how-to-use/search/advanced-search-user-docs/","text":"Advanced Search Component Introduction The AdvancedSearchComponent allows for the creation of complex queries using a graphical widget. The widget's contents are then turned into a string representing a Gravsearch (SPARQL) query to be sent to DSP-API. A query consists of the following elements: - ontology (data model) selection - selection of a resource class belonging to the selected ontology (optional) - specification of properties, comparison operators, and values (optional). Although selection of a resource or a property or both are optional, either a resource class has to be selected or at least one property has to be specified, otherwise the query is not considered valid and cannot be submitted. Comparison Operators Depending on the value type of the chosen property, one or more of the following comparison operators can be selected: is equal to : value equality: same number, exact same string, overlap of date periods, same target resource. is not equal to : value inequality: not same number, not exact same string, no overlap of date periods, not same target resource. is greater than : value comparison: number is greater than search value, date period begins after search value. is greater than or equal to value equality / value comparison: number is equal to or greater than search value, overlap of date periods or date period begins after search value. is less than : value comparison: number is less than search value, date period ends before search value. is less than or equal to : value equality / value comparison: number is equal to or less than search value, overlap of date periods or date period ends before search value. exists : value for the given property exists. is like : search value is contained in a text using the SPARQL REGEX function (supports regular expressions). matches : text property: search value matches the text ( Lucene Query Parser Syntax ). linking property: matches the specified linked resource. Search Examples Regular Expressions (is like) The is like operator lets the user search for texts that are like the search value via the support of regular expressions In this example, all books are found whose title contains \"Narrenschiff\" followed by a space and some other characters like \"(lat.)\" or \"(dt.)\". For general information about regular expressions see this interactive tutorial . Lucene Parser Syntax (matches) Used with a text property, the matches operator lets the user search for texts that match the search value, supporting Lucene Query Parser Syntax . In this example, all persons are found whose names contain \"Ja\" and \"ob\" with a character in between (represented by the wildcard \"?\"). This search finds \"Jacob\" as well as \"Jakob\". Note the difference between regular expressions and Lucene parser syntax! Specifying a Linked Resource (matches) Used with a linking property, the matches operator lets the user search for a linked resource that matches the specified properties. In this example, the user writes a query looking for all letters that have an author that: 1. was born after January 1st 1650 2. whose family name is \"Bernoulli\" This is different from the \"is equal to\" operator that lets the user specify a certain person (selected from a list).","title":"Advanced Search Component"},{"location":"how-to-use/search/advanced-search-user-docs/#advanced-search-component","text":"","title":"Advanced Search Component"},{"location":"how-to-use/search/advanced-search-user-docs/#introduction","text":"The AdvancedSearchComponent allows for the creation of complex queries using a graphical widget. The widget's contents are then turned into a string representing a Gravsearch (SPARQL) query to be sent to DSP-API. A query consists of the following elements: - ontology (data model) selection - selection of a resource class belonging to the selected ontology (optional) - specification of properties, comparison operators, and values (optional). Although selection of a resource or a property or both are optional, either a resource class has to be selected or at least one property has to be specified, otherwise the query is not considered valid and cannot be submitted.","title":"Introduction"},{"location":"how-to-use/search/advanced-search-user-docs/#comparison-operators","text":"Depending on the value type of the chosen property, one or more of the following comparison operators can be selected: is equal to : value equality: same number, exact same string, overlap of date periods, same target resource. is not equal to : value inequality: not same number, not exact same string, no overlap of date periods, not same target resource. is greater than : value comparison: number is greater than search value, date period begins after search value. is greater than or equal to value equality / value comparison: number is equal to or greater than search value, overlap of date periods or date period begins after search value. is less than : value comparison: number is less than search value, date period ends before search value. is less than or equal to : value equality / value comparison: number is equal to or less than search value, overlap of date periods or date period ends before search value. exists : value for the given property exists. is like : search value is contained in a text using the SPARQL REGEX function (supports regular expressions). matches : text property: search value matches the text ( Lucene Query Parser Syntax ). linking property: matches the specified linked resource.","title":"Comparison Operators"},{"location":"how-to-use/search/advanced-search-user-docs/#search-examples","text":"","title":"Search Examples"},{"location":"how-to-use/search/advanced-search-user-docs/#regular-expressions-is-like","text":"The is like operator lets the user search for texts that are like the search value via the support of regular expressions In this example, all books are found whose title contains \"Narrenschiff\" followed by a space and some other characters like \"(lat.)\" or \"(dt.)\". For general information about regular expressions see this interactive tutorial .","title":"Regular Expressions (is like)"},{"location":"how-to-use/search/advanced-search-user-docs/#lucene-parser-syntax-matches","text":"Used with a text property, the matches operator lets the user search for texts that match the search value, supporting Lucene Query Parser Syntax . In this example, all persons are found whose names contain \"Ja\" and \"ob\" with a character in between (represented by the wildcard \"?\"). This search finds \"Jacob\" as well as \"Jakob\". Note the difference between regular expressions and Lucene parser syntax!","title":"Lucene Parser Syntax (matches)"},{"location":"how-to-use/search/advanced-search-user-docs/#specifying-a-linked-resource-matches","text":"Used with a linking property, the matches operator lets the user search for a linked resource that matches the specified properties. In this example, the user writes a query looking for all letters that have an author that: 1. was born after January 1st 1650 2. whose family name is \"Bernoulli\" This is different from the \"is equal to\" operator that lets the user specify a certain person (selected from a list).","title":"Specifying a Linked Resource (matches)"},{"location":"how-to-use/search/advanced-search/","text":"Advanced search (Component) The advanced search allows you to filter by project, by source type (resource class), or by the metadata (properties) of source types. Each filter can be used individually or combined. The metadata field can be precisely filtered with criteria such as \"contains\", \"like\", \"equals to\", \"exists\" or in case of a date value with \"before\" or \"after\". In addition, for a metadata field that is connected to another source type, it's possible to filter by this second source type. If you are looking for the source type \"Photograph\" with the metadata field \"Photographer\", which is connected to source type \"Person\", you can search for photograph(s) taken by person(s) who is born before February 1970. The result of this request will be an intersection of the two source types. Parameters Name Type Description route string Route to navigate after search. This route path should contain a component for search results. toggleExtendedSearchForm boolean Trigger toggle for advanced search form. gravsearch string Send the gravsearch query back. Examples Advanced search panel ```html ```","title":"Advanced search"},{"location":"how-to-use/search/advanced-search/#advanced-search-component","text":"The advanced search allows you to filter by project, by source type (resource class), or by the metadata (properties) of source types. Each filter can be used individually or combined. The metadata field can be precisely filtered with criteria such as \"contains\", \"like\", \"equals to\", \"exists\" or in case of a date value with \"before\" or \"after\". In addition, for a metadata field that is connected to another source type, it's possible to filter by this second source type. If you are looking for the source type \"Photograph\" with the metadata field \"Photographer\", which is connected to source type \"Person\", you can search for photograph(s) taken by person(s) who is born before February 1970. The result of this request will be an intersection of the two source types.","title":"Advanced search (Component)"},{"location":"how-to-use/search/advanced-search/#parameters","text":"Name Type Description route string Route to navigate after search. This route path should contain a component for search results. toggleExtendedSearchForm boolean Trigger toggle for advanced search form. gravsearch string Send the gravsearch query back.","title":"Parameters"},{"location":"how-to-use/search/advanced-search/#examples","text":"Advanced search panel ```html ```","title":"Examples"},{"location":"how-to-use/search/expert-search/","text":"Expert search (Component) The expert search is a textarea field in which Gravsearch queries can be written. Complex searches can be made this way but you must know the Gravsearch language . Parameters Name Type Description route (optional) string Route to navigate after search. This route path should contain a component for search results. gravsearch string Send the gravsearch query back. toggleExpertSearchForm boolean Trigger toggle for advanced search form. Examples Advanced search panel <!-- param gravsearch is where the gravsearch query is cached or sent to DSP-API --> <dsp-expert-search (gravsearch)=\"setGravsearch($event)\"></dsp-expert-search>","title":"Expert search"},{"location":"how-to-use/search/expert-search/#expert-search-component","text":"The expert search is a textarea field in which Gravsearch queries can be written. Complex searches can be made this way but you must know the Gravsearch language .","title":"Expert search (Component)"},{"location":"how-to-use/search/expert-search/#parameters","text":"Name Type Description route (optional) string Route to navigate after search. This route path should contain a component for search results. gravsearch string Send the gravsearch query back. toggleExpertSearchForm boolean Trigger toggle for advanced search form.","title":"Parameters"},{"location":"how-to-use/search/expert-search/#examples","text":"Advanced search panel <!-- param gravsearch is where the gravsearch query is cached or sent to DSP-API --> <dsp-expert-search (gravsearch)=\"setGravsearch($event)\"></dsp-expert-search>","title":"Examples"},{"location":"how-to-use/search/fulltext-search/","text":"Full-text search (Component) - DEPRECATED Input field to perform a full text search. Parameters Name Type Description route string Route to navigate after search. This route path should contain a component for search results. projectfilter (optional) boolean If true it shows the selection of projects to filter by. filterbyproject (optional) string If the full-text search should be filtered by one project, you can define it with project iri. Examples Simple full-text search <!-- param route is where the router-outlet is defined for search results --> <dsp-fulltext-search [route]=\"'/search'\"></dsp-fulltext-search> <router-outlet></router-outlet> Full-text search with project filter <!-- param route is where the router-outlet is defined for search results --> <dsp-fulltext-search [route]=\"'/search'\" [projectfilter]=\"true\"></dsp-fulltext-search> <router-outlet></router-outlet>","title":"Fulltext search"},{"location":"how-to-use/search/fulltext-search/#full-text-search-component-deprecated","text":"Input field to perform a full text search.","title":"Full-text search (Component) - DEPRECATED"},{"location":"how-to-use/search/fulltext-search/#parameters","text":"Name Type Description route string Route to navigate after search. This route path should contain a component for search results. projectfilter (optional) boolean If true it shows the selection of projects to filter by. filterbyproject (optional) string If the full-text search should be filtered by one project, you can define it with project iri.","title":"Parameters"},{"location":"how-to-use/search/fulltext-search/#examples","text":"","title":"Examples"},{"location":"how-to-use/search/fulltext-search/#simple-full-text-search","text":"<!-- param route is where the router-outlet is defined for search results --> <dsp-fulltext-search [route]=\"'/search'\"></dsp-fulltext-search> <router-outlet></router-outlet>","title":"Simple full-text search"},{"location":"how-to-use/search/fulltext-search/#full-text-search-with-project-filter","text":"<!-- param route is where the router-outlet is defined for search results --> <dsp-fulltext-search [route]=\"'/search'\" [projectfilter]=\"true\"></dsp-fulltext-search> <router-outlet></router-outlet>","title":"Full-text search with project filter"},{"location":"how-to-use/search/search-panel/","text":"Search panel (Component) The search-panel contains the list of projects to filter and dsp-fulltext-search and links to dsp-advanced-search and dsp-expert-search. Parameters Name Type Description route string Route to navigate after search. This route path should contain a component for search results. projectfilter (optional) boolean If true it shows the selection of projects to filter by. filterbyproject (optional) string If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject advanced (optional) boolean Adds the extended / advanced search to the panel expert (optional) boolean Adds the expert search / gravsearch editor to the panel Examples Implement the search panel in your HTML file: <dsp-search-panel [filterbyproject]=\"http://rdfh.ch/projects/0001\" [projectfilter]=\"true\" [advanced]=\"true\" [expert]=\"true\"> </dsp-search-panel> <router-outlet></router-outlet>","title":"Search-panel"},{"location":"how-to-use/search/search-panel/#search-panel-component","text":"The search-panel contains the list of projects to filter and dsp-fulltext-search and links to dsp-advanced-search and dsp-expert-search.","title":"Search panel (Component)"},{"location":"how-to-use/search/search-panel/#parameters","text":"Name Type Description route string Route to navigate after search. This route path should contain a component for search results. projectfilter (optional) boolean If true it shows the selection of projects to filter by. filterbyproject (optional) string If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject advanced (optional) boolean Adds the extended / advanced search to the panel expert (optional) boolean Adds the expert search / gravsearch editor to the panel","title":"Parameters"},{"location":"how-to-use/search/search-panel/#examples","text":"Implement the search panel in your HTML file: <dsp-search-panel [filterbyproject]=\"http://rdfh.ch/projects/0001\" [projectfilter]=\"true\" [advanced]=\"true\" [expert]=\"true\"> </dsp-search-panel> <router-outlet></router-outlet>","title":"Examples"},{"location":"how-to-use/viewer/","text":"DSP-UI VIEWER module DspViewerModule contains components to display resources; as a single item or as a list for search results. It is comprised of resource sub-components such as file representations components to display still images, video, audio or text only and also value components to use single property elements. Prerequisites For help getting started with a new Angular app, check out the Angular CLI . For existing apps, follow these steps to begin using DSP-UI VIEWER. Installation DspViewerModule is part of @dasch-swiss/dsp-ui, follow the installation guide . Setup Import the viewer module in your app.module.ts and add it to the NgModules's imports: import { AppComponent } from './app.component'; import { DspCoreModule, DspViewerModule } from '@dasch-swiss/dsp-ui'; @NgModule({ declarations: [ AppComponent ], imports: [ DspCoreModule, // <- core module is required for some components and directives DspViewerModule // <- add viewer module in the imports ], providers: [ ... ] // <-- add providers as mentioned in the installation guide bootstrap: [AppComponent] }) export class AppModule { } Usage Use DSP-UI VIEWER module in the component template as follows. The example shows how to display a resource by iri = 'http://rdfh.ch/0803/18a671b8a601'. <dsp-resource-view [iri]=\"'http://rdfh.ch/0803/18a671b8a601'\"></dsp-resource-view>","title":"Introduction Viewer"},{"location":"how-to-use/viewer/#dsp-ui-viewer-module","text":"DspViewerModule contains components to display resources; as a single item or as a list for search results. It is comprised of resource sub-components such as file representations components to display still images, video, audio or text only and also value components to use single property elements.","title":"DSP-UI VIEWER module"},{"location":"how-to-use/viewer/#prerequisites","text":"For help getting started with a new Angular app, check out the Angular CLI . For existing apps, follow these steps to begin using DSP-UI VIEWER.","title":"Prerequisites"},{"location":"how-to-use/viewer/#installation","text":"DspViewerModule is part of @dasch-swiss/dsp-ui, follow the installation guide .","title":"Installation"},{"location":"how-to-use/viewer/#setup","text":"Import the viewer module in your app.module.ts and add it to the NgModules's imports: import { AppComponent } from './app.component'; import { DspCoreModule, DspViewerModule } from '@dasch-swiss/dsp-ui'; @NgModule({ declarations: [ AppComponent ], imports: [ DspCoreModule, // <- core module is required for some components and directives DspViewerModule // <- add viewer module in the imports ], providers: [ ... ] // <-- add providers as mentioned in the installation guide bootstrap: [AppComponent] }) export class AppModule { }","title":"Setup"},{"location":"how-to-use/viewer/#usage","text":"Use DSP-UI VIEWER module in the component template as follows. The example shows how to display a resource by iri = 'http://rdfh.ch/0803/18a671b8a601'. <dsp-resource-view [iri]=\"'http://rdfh.ch/0803/18a671b8a601'\"></dsp-resource-view>","title":"Usage"},{"location":"how-to-use/viewer/search-results/","text":"Search results (Component) The search-results component gets the search mode and parameters from routes or inputs, and returns the corresponding resources that are displayed in a list or a grid. The results can be filtered by project. List of parameters complexView (optional) searchQuery (optional) searchMode (optional) projectIri (optional) Simple search results example HTML file <dsp-search-results></dsp-search-results> Search results filtered by project example HTML file <dsp-search-results [projectIri]=\"projectIri\"></dsp-search-results> Typescript file export class SearchResultsComponent { projectIri = 'http://rdfh.ch/projects/0001'; // project iri constructor() { } } Search results providing search mode and query parameters example HTML file <!-- example of an advanced search where we pass a gravsearch query as search parameter --> <dsp-search-results [searchMode]=\"'extended'\" [searchQuery]=\"gravsearch\"></dsp-search-results> Typescript file export class SearchResultsComponent { gravsearch: string = `PREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#> CONSTRUCT { ?mainRes knora-api:isMainResource true . } WHERE { ?mainRes a knora-api:Resource . ?mainRes a <http://0.0.0.0:3333/ontology/0001/anything/simple/v2#BlueThing> . } OFFSET 0`; constructor() { } }","title":"Search-results"},{"location":"how-to-use/viewer/search-results/#search-results-component","text":"The search-results component gets the search mode and parameters from routes or inputs, and returns the corresponding resources that are displayed in a list or a grid. The results can be filtered by project.","title":"Search results (Component)"},{"location":"how-to-use/viewer/search-results/#list-of-parameters","text":"complexView (optional) searchQuery (optional) searchMode (optional) projectIri (optional)","title":"List of parameters"},{"location":"how-to-use/viewer/search-results/#simple-search-results-example","text":"","title":"Simple search results example"},{"location":"how-to-use/viewer/search-results/#html-file","text":"<dsp-search-results></dsp-search-results>","title":"HTML file"},{"location":"how-to-use/viewer/search-results/#search-results-filtered-by-project-example","text":"","title":"Search results filtered by project example"},{"location":"how-to-use/viewer/search-results/#html-file_1","text":"<dsp-search-results [projectIri]=\"projectIri\"></dsp-search-results>","title":"HTML file"},{"location":"how-to-use/viewer/search-results/#typescript-file","text":"export class SearchResultsComponent { projectIri = 'http://rdfh.ch/projects/0001'; // project iri constructor() { } }","title":"Typescript file"},{"location":"how-to-use/viewer/search-results/#search-results-providing-search-mode-and-query-parameters-example","text":"","title":"Search results providing search mode and query parameters example"},{"location":"how-to-use/viewer/search-results/#html-file_2","text":"<!-- example of an advanced search where we pass a gravsearch query as search parameter --> <dsp-search-results [searchMode]=\"'extended'\" [searchQuery]=\"gravsearch\"></dsp-search-results>","title":"HTML file"},{"location":"how-to-use/viewer/search-results/#typescript-file_1","text":"export class SearchResultsComponent { gravsearch: string = `PREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#> CONSTRUCT { ?mainRes knora-api:isMainResource true . } WHERE { ?mainRes a knora-api:Resource . ?mainRes a <http://0.0.0.0:3333/ontology/0001/anything/simple/v2#BlueThing> . } OFFSET 0`; constructor() { } }","title":"Typescript file"}]}